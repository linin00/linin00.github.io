<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown指南（新手）</title>
      <link href="/2020/09/05/Markdown%E6%8C%87%E5%8D%97%EF%BC%88%E6%96%B0%E6%89%8B%EF%BC%89/"/>
      <url>/2020/09/05/Markdown%E6%8C%87%E5%8D%97%EF%BC%88%E6%96%B0%E6%89%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><a href="https://www.jianshu.com/">「简书」</a>作为一款「写作软件」在诞生之初就支持了 Markdown，Markdown 是一种「电子邮件」风格的「标记语言」，我们强烈推荐所有写作者学习和掌握该语言。为什么？可以参考:</p><ul><li><a href="https://www.jianshu.com/p/qqGjLN">『为什么作家应该用 Markdown 保存自己的文稿』</a></li><li><a href="https://www.jianshu.com/p/PpDNMG">『Markdown写作浅谈』</a><a id="more"></a>在此，我们总结 Markdown 的优点如下：</li><li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li><li>让你专注于文字而不是排版。</li><li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</li><li>Markdown 的标记语法有极好的可读性。</li></ul><p>当然，我们既然如此推崇 Markdown ，也必定会教会你使用 Markdown ，这也是本文的目的所在。不过，虽然 Markdown 的语法已经足够简单，但是现有的 Markdown 语法说明更多的是写给 web 从业者看的，对于很多写作者来说，学习起来效率很低，现在，我们特地为写作者量身定做本指南，从写作者的实际需求出发，介绍写作者真正实用的常用格式，深入浅出、图文并茂地让您迅速掌握 Markdown 语法。</p><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>这是最为常用的格式，在平时常用的的文本编辑器中大多是这样实现的：输入文本、选中文本、设置标题格式。</p><p>而在 Markdown 中，你只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题 </span></span><br></pre></td></tr></table></figure><p><em>注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。</em></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 - 就可以了，例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 文本1</span><br><span class="line"><span class="bullet">-</span> 文本2</span><br><span class="line"><span class="bullet">-</span> 文本3</span><br></pre></td></tr></table></figure><p>如果你希望有序列表，<br>也可以在文字前面加上 1. 2. 3. 就可以了，例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 文本1</span><br><span class="line"><span class="bullet">2.</span> 文本2</span><br><span class="line"><span class="bullet">3.</span> 文本3</span><br></pre></td></tr></table></figure><p><em>注：-、1.和文本之间要保留一个字符的空格。</em></p><p>在 Markdown 中，插入链接不需要其他按钮，你只需要使用 <a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">显示文本</a> 这样的语法即可，例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://upload-images.jianshu.io/upload<span class="emphasis">_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br></pre></td></tr></table></figure><p><em>注：插入图片的语法和链接的语法很像，只是前面多了一个 ！。</em></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 &gt; 就好了，例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</span></span><br></pre></td></tr></table></figure><p>最终显示的就是：</p><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><p>Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*一盏灯*</span>， 一片昏黄；<span class="strong">**一简书**</span>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</span><br></pre></td></tr></table></figure><p>最终显示的就是下文，其中「一盏灯」是斜体，「一简书」是粗体：<br><em>一盏灯</em>， 一片昏黄；<strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p><h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><p>需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。<br>如果引用的语句为多行，可以将```置于这段代码的首行和末行。<br><img src="https://github.com/linin00/Cloud/blob/master/259-dcf737a97e71cd73.webp?raw=true" alt="代码引用的案例截图："></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>相关代码：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |---------------| ------|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><p>显示效果：<br>| Tables        | Are           | Cool  |<br>| ————- |:————-:| —–:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p><p>相关代码：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dog | bird | cat</span><br><span class="line">----|------|----</span><br><span class="line">foo | foo  | foo</span><br><span class="line">bar | bar  | bar</span><br><span class="line">baz | baz  | baz</span><br></pre></td></tr></table></figure><p>显示效果：<br>dog | bird | cat<br>—-|——|—-<br>foo | foo  | foo<br>bar | bar  | bar<br>baz | baz  | baz</p><p><em>通过加“:”以实现对齐效果</em></p><h2 id="显示链接中带括号的图片"><a href="#显示链接中带括号的图片" class="headerlink" title="显示链接中带括号的图片"></a>显示链接中带括号的图片</h2><p>代码如下:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![][1]</span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://latex.codecogs.com/gif.latex?\prod%20\(n_&#123;i&#125;\)+1</span></span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上几种格式是比较常用的格式，所以我们针对这些语法做了比较详细的说明。除这些之外，Markdown 还有其他语法，如想了解和学习更多，可以参考这篇<a href="https://link.jianshu.com/?t=http://wowubuntu.com/markdown/">『Markdown 语法说明』</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo&#39;s next主题设置首页显示预览</title>
      <link href="/2020/09/05/Hexo-s-next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E9%A2%84%E8%A7%88/"/>
      <url>/2020/09/05/Hexo-s-next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E9%A2%84%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>一个很牛叉的解决<a href="https://www.jianshu.com/p/393d067dba8d">CGPointZero</a></p><p>然而这解决方法在我的hexo版本不适用</p><p>我的解决：在文章里加<code>&lt;!-- more --&gt;</code>会自动截断</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美化 </tag>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给blog增加上下文搜索功能</title>
      <link href="/2020/09/02/%E7%BB%99blog%E5%A2%9E%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/09/02/%E7%BB%99blog%E5%A2%9E%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="为-Hexo-博客创建本地搜索引擎"><a href="#为-Hexo-博客创建本地搜索引擎" class="headerlink" title="为 Hexo 博客创建本地搜索引擎"></a>为 Hexo 博客创建本地搜索引擎</h1><p>NexT 主题默认提供了两个站内搜索解决方案：swiftype 和 tinysou。</p><h2 id="搜索功能的局限"><a href="#搜索功能的局限" class="headerlink" title="搜索功能的局限"></a>搜索功能的局限</h2><ul><li>受限于第三方服务，第三方服务可能说变就变——曾经的各种博客网站，以及 swiftype 就是如此；</li><li>不喜欢第三方服务的样式，与博客样式脱节；</li><li>使用第三方服务，需要应用第三方的 JavaScript 脚本等内容，可能存在安全风险。</li></ul><p>经过检索之后，发现 Hexo 已有可以接受的解决方案了。本文来介绍如何在 Hexo 博客中建立自己的本地搜索引擎。</p><a id="more"></a><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>对于大型搜索引擎来说，在抓取并处理好网页之后，就要建立所谓的「倒排索引」了。所谓倒排索引，指的是以检索词的 term 为键，以包含该 term 的文档列表为值。如此一来，我们就可以根据检索词中的各个 term，获取若干列表。而后，对这些列表求交集，就能得到「包含检索词中所有 term」的文档了。</p><p>在个人网站上，特别是 Hexo 生成的静态站点，做类似的工作是不太容易的。这里原因有几点，分列如下</p><ul><li>Hexo 生成的是静态站点，因此无法利用服务器做数据库的存储和相关计算；</li><li>这就制约了倒排索引的存储和求交；</li><li>另外一方面，制作倒排索引的过程，需要应用完善的 NLP 分词，这一工程量相对巨大。</li></ul><p>考虑到我们无法在服务器上做数据库存储，我们就必须以文件的形式保存索引，让用户以浏览器下载该文件。此外，考虑到我们无法在服务器上做计算，我们就必须依赖可在浏览器上执行的代码，处理用户的检索任务。因此，我们说，仿照大型搜索引擎制作站内搜索，对于静态站点来说，是不现实的。</p><p>那么，我们可以怎样做呢？既然标准的方案无法达成，那我们就只能退而求其次。</p><p>首先，不管怎样「求其次」，都必须要有一个索引文件。这是因为，在索引文件当中进行各种操作，总是要比直接对网页页面进行操作来得要方便和快捷的。因此，首先我们需要一个能够嵌入 Hexo 的工具，方便地生成这样的索引文件。其次，有了索引，我们需要一个有效的算法：根据用户输入的检索词，返回包含检索词的文章列表。考虑到这样的算法需要在用户的浏览器上执行，我们选择使用 JavaScript 和 jQuery 来实现。接下来，为了与用户交互：接受检索词和返回结果；我们需要在页面的合适位置展示搜索框和输出结果。最后，还有一些细节问题需要处理。例如说，搜索框和输出结果的样式要如何设计；例如说，索引文件通常比较大，随页面一起下载会导致页面加载缓慢，要如何解决这个问题。</p><p>我们依次来解决这些问题。</p><h2 id="用-hexo-generator-search-生成索引"><a href="#用-hexo-generator-search-生成索引" class="headerlink" title="用 hexo-generator-search 生成索引"></a>用 hexo-generator-search 生成索引</h2><p>HaHack 参考 Christian Fei 的 <a href="https://github.com/christian-fei/Simple-Jekyll-Search">Simple Jekyll Search</a> 实现了名为 hexo-generator-search 的生成器。安装该生成器之后，在执行 hexo generate 的过程中，会按照配置生成一个 XML 文件，用于保存全站的文档数据。这个 XML 文件只是简单地做了数据的结构化存储，而完全没有考虑分词、倒排等问题。</p><p>安装 hexo-generator-search 非常简单，只需要在 Hexo 项目目录下执行下列命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-search</span><br></pre></td></tr></table></figure><p>如此一来，我们只需在站点配置文件 _config.yml 当中写入如下配置，即可为全站的文档生成索引文件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure><p>具体来说，hexo-generator-search 会为全站所有 post 类型的页面生成结构化的数据，并保存在本站的 /search.xml 当中。若想让 page 类型的页面也纳入索引，则可以将 field 的值修改为 all。</p><h2 id="用-JavaScript-和-jQuery-实现检索算法"><a href="#用-JavaScript-和-jQuery-实现检索算法" class="headerlink" title="用 JavaScript 和 jQuery 实现检索算法"></a>用 JavaScript 和 jQuery 实现检索算法</h2><p>另外一方面，HaHack 建议以 jQuery 的文本匹配为基础，在前端界面上运行站内搜索。主要的处理流程是：</p><ol><li>载入 search.xml；</li><li>解析 search.xml；</li><li>解析检索词；</li><li>在索引中进行字符串匹配；</li><li>展现结果。</li></ol><p>对官方的版本进行了少许的修改（后详），并加入了注释。这样应该相对比较好理解了。可以在 <a href="https://github.com/Liam0205/hexo-search-plugin-snippets/blob/master/snippets/search.js">GitHub</a> 上看到修改的版本。</p><p>需要注意的是，search.js 依赖 jQuery。因此，你需要在引入 search.js 之前，引入 jQuery 的脚本。比如，你可以在 head 部分这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;//cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;。</span><br></pre></td></tr></table></figure><h2 id="在合适的位置展示搜索框"><a href="#在合适的位置展示搜索框" class="headerlink" title="在合适的位置展示搜索框"></a>在合适的位置展示搜索框</h2><p>接下来，我们需要在合适的位置，呈现一个搜索框。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form class=<span class="string">&quot;site-search-form&quot;</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;local-search-input&quot;</span> class=<span class="string">&quot;st-search-input&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;local-search-result&quot;</span> class=<span class="string">&quot;local-search-result-cls&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>此处，local-search-input 是一个输入框，用于接收用户输入的检索词；local-search-result 是用于展现搜索结果的 div 标签。这部分代码，我也已上传到 <a href="https://github.com/Liam0205/hexo-search-plugin-snippets/blob/master/snippets/search.swig">GitHub</a>。</p><h2 id="其他一些细节"><a href="#其他一些细节" class="headerlink" title="其他一些细节"></a>其他一些细节</h2><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>现在，我们已经有了索引文件、搜索算法和搜索框。但是，现在而言，搜索框是孤立的：用户在搜索框中输入内容，并不会触发搜索算法。换而言之，搜索函数并没有调用。因此，我们需要调用定义在 search.js 当中定义的 searchFunc。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var path = <span class="string">&quot;/search.xml&quot;</span>;</span><br><span class="line">searchFunc(path, <span class="string">&#x27;local-search-input&#x27;</span>, <span class="string">&#x27;local-search-result&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="在何时的时候触发搜索函数"><a href="#在何时的时候触发搜索函数" class="headerlink" title="在何时的时候触发搜索函数"></a>在何时的时候触发搜索函数</h3><p>像上面这样调用搜索函数，有一个潜在的问题。调用搜索函数时，首先会尝试载入并解析 search.xml 文件。这个文件包含了站点里所有博文的所有内容；因此，通常来说它的体积非常大。这样一来，如果不做任何限制，函数将在网页加载时被调用；因而，体积庞大的索引文件也将在网页加载的时候引入。这会导致网页整体加载的速度非常缓慢，对用户体验是一种伤害。</p><p>因此，我们会考虑，在激活搜索框时，我们才去调用搜索函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var inputArea       = document.querySelector(<span class="string">&quot;#local-search-input&quot;</span>);</span><br><span class="line">inputArea.onclick   = <span class="function"><span class="title">function</span></span>()&#123; getSearchFile() &#125;</span><br></pre></td></tr></table></figure><p>此处，我们通过 inputArea 这个变量，监控搜索框的状态。只有当用户用鼠标点击搜索框时，才会触发 getSearchFile 函数，载入索引文件并执行 searchFunc。</p><p>getSearchFile 函数定义在 search.js 脚本当中了。</p><p>不过，这还不够。因为，如此一来，每次用户点击搜索框时，都会触发一次 searchFunc 函数，并加载一次 search.xml 索引文件。我们期待的是，只有当用户第一次点击搜索框之后，才去下载索引文件；之后的搜索行为，直接复用上一次加载的文件即可。</p><p>为此，我们需要在执行好 getSearchFile 函数之后，禁用 onclick 时间的 handler。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var inputArea       = document.querySelector(<span class="string">&quot;#local-search-input&quot;</span>);</span><br><span class="line">inputArea.onclick   = <span class="function"><span class="title">function</span></span>()&#123; getSearchFile(); this.onclick = null &#125;</span><br></pre></td></tr></table></figure><h3 id="在搜索框中屏蔽回车"><a href="#在搜索框中屏蔽回车" class="headerlink" title="在搜索框中屏蔽回车"></a>在搜索框中屏蔽回车</h3><p>由于我们在搜索框中使用了 input 标签。这是一个表单，但我们不希望它具有一些表单的行为。例如说，我们的搜索结果是实时呈现的；我们不希望用户在输入检索词之后，误按回车键，导致页面刷新。</p><p>为此，我们可以这样做。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputArea.onkeydown = <span class="function"><span class="title">function</span></span>()&#123; <span class="keyword">if</span>(event.keyCode == 13) <span class="built_in">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">在加载索引文件时，给用户一个提示</span><br></pre></td></tr></table></figure><h3 id="在加载索引文件时，给用户一个提示"><a href="#在加载索引文件时，给用户一个提示" class="headerlink" title="在加载索引文件时，给用户一个提示"></a>在加载索引文件时，给用户一个提示</h3><p>我们为了保护页面加载的速度，将加载索引文件的过程，后移到用户点击搜索框时进行。然而，如前所述，索引文件通常是比较大的；加载并解析索引文件通常会耗费不少时间。在这个过程中，用户可能已经输入了一些检索词；这些检索词，会因为尚未加载完毕索引文件，而得不到任何的检索结果。这当然是不合适的。</p><p>因此，我们需要在加载和解析索引文件的过程中，给用户一个清晰的提示。为此，我们需要修改 search.js 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="variable">$resultContent</span> = document.getElementById(<span class="string">&#x27;local-search-result&#x27;</span>);</span><br><span class="line"><span class="variable">$resultContent</span>.innerHTML = BTN + <span class="string">&quot;&lt;ul&gt;&lt;span class=&#x27;local-search-empty&#x27;&gt;首次搜索，正在载入索引文件，请稍后……&lt;span&gt;&lt;/ul&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>将这段代码放在加载和解析索引文件之前，就能在 local-search-result 中提示「正在载入索引文件」了。</p><h3 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h3><p>最后，我们可以通过样式表来控制这一系列内容的呈现形式。<em>始终博客</em>使用的样式表可以在 <a href="https://github.com/Liam0205/hexo-search-plugin-snippets/blob/master/snippets/search.stylus">GitHub</a> 上找到。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><ul><li><a href="http://hahack.com/codes/-">http://hahack.com/codes/-</a> local-search-engine-for-hexo/</li><li><a href="http://moxfive.xyz/2016/05/31/-">http://moxfive.xyz/2016/05/31/-</a> hexo-local-search/</li><li><a href="http://www.barretlee.com/blog/2017/06/04/-">http://www.barretlee.com/blog/2017/06/04/-</a> hexo-search-insite/</li><li><a href="https://github.com/barretlee/-">https://github.com/barretlee/-</a> hexo-search-plugin-snippets</li><li><a href="https://github.com/Liam0205/-">https://github.com/Liam0205/-</a> hexo-search-plugin-snippets</li></ul><p>(#ﾟДﾟ)似乎某样东西的难度超出了linin的想象呢</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美化 </tag>
            
            <tag> 技术 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>youtube-dl使用</title>
      <link href="/2020/09/02/youtube-dl%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/02/youtube-dl%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="youtube-dl：一个命令行视频下载利器"><a href="#youtube-dl：一个命令行视频下载利器" class="headerlink" title="youtube-dl：一个命令行视频下载利器"></a>youtube-dl：一个命令行视频下载利器</h1><p>youtube-dl 的官网：<a href="http://rg3.github.io/youtube-dl/index.html">youtube-dl</a><br>youtube-dl 的 GitHub 页面：<a href="https://github.com/rg3/youtube-dl">rg3/youtube-dl</a></p><h2 id="Youtube-dl-有什么用？"><a href="#Youtube-dl-有什么用？" class="headerlink" title="Youtube-dl 有什么用？"></a>Youtube-dl 有什么用？</h2><p>youtube-dl 是一个命令行工具，对我所知的大部分视频网站有不错的支持，你可以选择下载视频，或是将视频流直接导出到自己想使用的播放器中，也可以以JSON的形式获取可下载资源的URL。</p><p>使用方便、足够简洁。</p><a id="more"></a><h2 id="安装-Youtube-dl"><a href="#安装-Youtube-dl" class="headerlink" title="安装 Youtube-dl"></a>安装 Youtube-dl</h2><p>Youtube-dl 通过 PyPi 分发，如果你的系统安装有 pip3 或 pip ，请直接使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install --upgrade youtube_dl <span class="comment"># 或pip3</span></span><br></pre></td></tr></table></figure><p>如果你是 macOS 用户，也可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install youtube-dl</span><br></pre></td></tr></table></figure><p>官网上的这个页面还提供了 Windows 可用的 exe 和直接通过 curl 或 wget 安装的方法。</p><p>官网上的<a href="http://rg3.github.io/youtube-dl/download.html">这个页面</a>还提供了 Windows 可用的 exe 和直接通过 curl 或 wget 安装的方法。</p><h2 id="利用-Youtube-dl-下载"><a href="#利用-Youtube-dl-下载" class="headerlink" title="利用 Youtube-dl 下载"></a>利用 Youtube-dl 下载</h2><h3 id="普通下载"><a href="#普通下载" class="headerlink" title="普通下载"></a>普通下载</h3><p>通过 Youtube-dl 下载视频十分简洁，例如你需要下载<a href="http://www.bilibili.com/video/av11728123/%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%EF%BC%9A">http://www.bilibili.com/video/av11728123/可以这样：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl <span class="string">&#x27;http://www.bilibili.com/video/av11728123/&#x27;</span></span><br></pre></td></tr></table></figure><p>你会得到这样的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[BiliBili] 11728123: Downloading webpage</span><br><span class="line">[BiliBili] 11728123: Downloading video info page</span><br><span class="line">[download] Destination: 【全明星freestyle】音浪-11728123.mp4</span><br><span class="line">[download] 100% of 9.07MiB <span class="keyword">in</span> 00:01</span><br></pre></td></tr></table></figure><p>如果你不进行任何特殊的指定，它会分析网页、自动选择默认画质并下载至Destination显示的文件中。</p><h3 id="输出文件的名字"><a href="#输出文件的名字" class="headerlink" title="输出文件的名字"></a>输出文件的名字</h3><p>如果你想指定输出文件的名字（有时对批量下载的人来说十分重要），你可以使用-o：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl <span class="string">&#x27;http://www.bilibili.com/video/av11728123/&#x27;</span> -o <span class="string">&#x27;你要的名字&#x27;</span></span><br><span class="line"><span class="comment"># 下载至文件：你要的名字 (无后缀)</span></span><br></pre></td></tr></table></figure><p>当然，请注意你选择的名字的拓展名，youtube-dl 并不会自动修改你所指定的后缀名。youtube-dl 同时也支持 <a href="https://github.com/rg3/youtube-dl#output-template">OUTPUT TEMPLATE</a>，你可以利用 %(title)s等参数（参考 Python 的字符串形式）将文件命名，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl <span class="string">&#x27;http://www.bilibili.com/video/av11728123/&#x27;</span> -o <span class="string">&#x27;%(title)s.%(ext)s&#x27;</span></span><br><span class="line"><span class="comment"># 下载至文件：【全明星freestyle】音浪.mp4</span></span><br></pre></td></tr></table></figure><h3 id="使用代理下载"><a href="#使用代理下载" class="headerlink" title="使用代理下载"></a>使用代理下载</h3><p>youtube-dl 提供了使用代理的参数，你可以简单地将自己代理的地址填入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --proxy 127.0.0.1:1087 <span class="string">&#x27;https://www.youtube.com/watch\?v\=_fc_TLg3eQ4&#x27;</span></span><br><span class="line"><span class="comment"># 成功通过ss在国内下载某不存在网站的视频</span></span><br></pre></td></tr></table></figure><p>如果你不清楚如何使用自己的代理网址，请询问你的代理提供商。</p><h3 id="将流文件直接转发到播放器"><a href="#将流文件直接转发到播放器" class="headerlink" title="将流文件直接转发到播放器"></a>将流文件直接转发到播放器</h3><p>你可以使用标准输入输出进行这一操作，下面是使用 vlc 播放的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -o - <span class="string">&quot;https://www.youtube.com/watch\?v\=_fc_TLg3eQ4&quot;</span> | vlc -</span><br></pre></td></tr></table></figure><h3 id="其他下载选项"><a href="#其他下载选项" class="headerlink" title="其他下载选项"></a>其他下载选项</h3><p>youtube-dl 还提供很多其他的下载选项，如挑选合适的分辨率，下载一个播放列表等，你可以研究并自定义如何下载一个文件。</p><h2 id="国内的-youtube-dl：-You-Get"><a href="#国内的-youtube-dl：-You-Get" class="headerlink" title="国内的 youtube-dl： You-Get"></a>国内的 youtube-dl： <a href="https://linin.xyz/2020/09/01/you-get-%E4%BD%BF%E7%94%A8/">You-Get</a></h2><p>You-Get的GitHub地址：<a href="https://github.com/soimort/you-get">soimort/you-get</a><br>事实上而言，我发现You-Get对国内视频网站的支持更加全面，但是由于作者已经有大约两个月的时间没有维护了，我在这里不作推荐。但是如果你遇到无法使用youtube-dl下载的视频页面，不妨试试这个同类小工具。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> youtube-dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linin01</title>
      <link href="/2020/09/01/linin01/"/>
      <url>/2020/09/01/linin01/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">密码呢?小老弟??😎</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a344d820c1fc78a055c825865a55fb8b4ea0fb107cfdddc3faacca45dd9f3e41">f7f2889cd1334e7def64bd9049eb373c3cf0537c7d9f77b91d376dd961d02746480b107c24b362a1706b45a0dfe12ed2ebbaa914fdb1afc54b89052f5b1769926ba37ba16b168cb86add8b14e9c1aae1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linin00</title>
      <link href="/2020/09/01/linin00/"/>
      <url>/2020/09/01/linin00/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c3431274f6df54cce40880f1acb169bedfa00debf69794bd4c1923dc9f8b174c">8e02f4f3c79ac7f91c4b3fbdd8a1d30a</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章加密</title>
      <link href="/2020/09/01/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/"/>
      <url>/2020/09/01/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hexo的next主题可谓是包办了你几乎所有的需求，却偏偏没有加上<strong>文章加密功能</strong>。</p><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><h4 id="低级"><a href="#低级" class="headerlink" title="低级"></a>低级</h4><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>打开yourblogsite/themes/next/layout/custom/head.swig文件，在<head></head>之间添加以下内容</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#JavaScript</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">&#x27;请输入密码&#x27;</span>) !== <span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">                alert(<span class="string">&#x27;密码错误&#x27;</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>之后，在你想要加密的文章的头文件里添加上password: yourpassword即可。</p><p>注意，这里仅针对Hexo平台的next主题。但是，它的代码和思想是通用的，你在Hexo的其他主题，甚至是Jekyll的主题里也是可以做到的，只是要摆放的位置会不一样。位置的要点是：</p><ul><li><p>模板文件。无论是Hexo还是Jekyll，都应该在layout文件夹中。</p></li><li><head></head>之间。其实在其他位置也是可行的，但是在此代码之前的一些内容可能会被加载，不完美。##### 存在问题目前主要问题是：</li><li><p>丑。调用浏览器的UI，各个平台的样式不统一。</p></li><li><p>可能被破解。如果你的博客源码是存放在GitHub这样的开源库的话，那么恭喜你。别有用心之人可以通过查看你的GitHub仓库对应文章的md文件找到这个密码。</p></li></ul><p>目前，我是把源码存在Coding的，他有私人仓库，所以不存在这样的问题。如果你是土豪程序猿，或者VPS，虚拟主机玩家，第二点也可以忽略。</p><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><p>真正高级别的方法早就有大神给做好了，同样是在hexo插件中心 &amp; GitHub。现将方法记录如下。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>或者 <code>bashyarn add hexo-blog-encrypt</code>(需要安装 Yarn)</p><h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><ol><li>首先在 站点配置文件 中启用该插件:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>然后在你的文章的头部添加上对应的字段，如 password, abstract, message<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-01-04T22:20:13.000Z</span><br><span class="line">category: 教程</span><br><span class="line">tags:</span><br><span class="line">  - 博客</span><br><span class="line">  - Hexo</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 密码：TloveY</span><br><span class="line">message:  输入密码，查看文章</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><ul><li>password: 是该博客加密使用的密码</li><li>abstract: 是该博客的摘要，会显示在博客的列表页</li><li>message: 这个是博客查看时，密码输入框上面的描述性文字</li></ul><ol start="3"><li>如果你想对 TOC 也进行加密，则在 article.ejs 中将 TOC 的生成代码修改成如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(post.toc == <span class="literal">true</span>)&#123; %&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;toc-div&quot;</span> class=<span class="string">&quot;toc-article&quot;</span> &lt;% <span class="keyword">if</span> (post.encrypt == <span class="literal">true</span>) &#123; %&gt;style=<span class="string">&quot;display:none&quot;</span> &lt;% &#125; %&gt;&gt;</span><br><span class="line">        &lt;strong class=<span class="string">&quot;toc-title&quot;</span>&gt;Index&lt;/strong&gt;</span><br><span class="line">        &lt;% <span class="keyword">if</span> (post.encrypt == <span class="literal">true</span>) &#123; %&gt;</span><br><span class="line">            &lt;%- toc(post.origin) %&gt;</span><br><span class="line">        &lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line">            &lt;%- toc(post.content) %&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;%- post.content %&gt;</span><br></pre></td></tr></table></figure></li><li>然后使用 <code>bashhexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，来查看效果。<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4></li><li>如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在 站点配置文件 中。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  default_abstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。</span><br><span class="line">  default_message: 输入密码，查看文章。</span><br></pre></td></tr></table></figure>这样，对于每一篇需要加密的文章就不必都在在头部添加 abstract 和 message 字段了，脚本会自动添加默认的内容填充。</li></ol><p>default_abstract : 这个是指在文章列表页，我们看到的加密文章描述。当然这是对所有加密文章生效的。<br>default_message : 这个在文章详情页的密码输入框上方的描述性文字。<br>default_template : 这个是指在文章详情页，我们看到的输入密码阅读的模板，同理，这个也是针对所有文章的</p><ol start="2"><li>如果你希望对某一篇特定的文章做特殊处理（如本文的 abstract ，可以在对应文章的头部添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-01-04T22:20:13.000Z</span><br><span class="line">category: 教程</span><br><span class="line">tags:</span><br><span class="line">  - 博客</span><br><span class="line">  - Hexo</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 密码：TloveY</span><br><span class="line">---</span><br></pre></td></tr></table></figure>此时，博客头部的 abstract 会覆盖 站点配置文件 的 default_abstract 实现自定义。<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4></li></ol><ul><li><p>如果你开启了 字数统计功能 的话，那么本文的字数会显得比实际值大。</p></li><li><p>加密文章内部分脚本会失效，已知<strong>代码复制</strong>失效。</p></li><li><p>加密输入密码无反应 bug。插件作者在之前版本已修复这个问题。 近期我也遇到了这个问题，查看GitHub上这个插件的issue发现，原因在于Chrome 将不再允许 https:// 页面加载 HTTP 资源，解决方案是开启博客的https访问，具体搜索怎么开启博客https访问即可。<a href="https://www.jianshu.com/p/509d2a240b7d">解决方案1</a><a href="https://github.com/MikeCoder/hexo-blog-encrypt/issues/114">解决方案2</a></p></li><li><p>最后的解决是在GitHub page 强制开启https</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密测试</title>
      <link href="/2020/09/01/%E5%8A%A0%E5%AF%86/"/>
      <url>/2020/09/01/%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e2809a5ffb0b106c411a24e20f24c34577c364c95df37c8cc865813250a600a8">0c82eceb360c5039096dbc0bb4eecdff</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github绑定与文件提交</title>
      <link href="/2020/09/01/github%E7%BB%91%E5%AE%9A%E4%B8%8E%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4/"/>
      <url>/2020/09/01/github%E7%BB%91%E5%AE%9A%E4%B8%8E%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p>虽然在GitHub上我们可以直接上传文件，但是我试了一下发现并不好用，点击上传完全没反应，可能是网络的原因吧。所以我们利用SSH来完成GitHub的绑定并提交文件，这样很方便快捷。首先来简单介绍一下SSH协议。</p><a id="more"></a><p>SSH（安全外壳协议，Secure Shell 的缩写）是建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。简单来说，SSH就是保障你的账户安全，将你的数据加密压缩，不仅防止其他人截获你的数据，还能加快传输速度。如果想详细了解的话，可以看这篇文章：<a href="https://blog.csdn.net/qq_35246620/article/details/54317740">详述 SSH 的原理及其应用 - CSDN</a>，下面就详细介绍如何绑定GitHub和提交文件。</p><h4 id="1-绑定GitHub"><a href="#1-绑定GitHub" class="headerlink" title="1.绑定GitHub"></a>1.绑定GitHub</h4><p>我们要用git上传文件到GitHub首先得利用SSH登录远程主机，而登录方式有两种：一种是口令登录；另一种是公钥登录。口令登录每次都要输入密码十分麻烦，而公钥登录就省去了输入密码的步骤，所以我们选择公钥授权。首先我们得在 GitHub 上添加 SSH key 配置，要想生成SSH key，就要先安装 SSH，不过我们安装了 Git Bash，其应该自带了 SSH。检验一下是否安装 SSH，我们在新建的文件夹中右键打开 Git Bash：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/1.png?raw=true" alt="1"><br>输入 ssh 命令，查看本机是否安装 SSH：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/2.jpg?raw=true" alt="2"><br>如上图所示，即已安装 SSH. 然后，输入 ssh-keygen -t rsa 命令（注意空格），表示我们指定 RSA 算法生成密钥，然后敲四次回车键，之后就就会生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub. （注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和 Shift+insert.）文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：</p><ul><li>Linux 系统：~/.ssh</li><li>Mac 系统：~/.ssh</li><li>Windows 10 ：C:/Users/ASUS/.ssh<br>接下来我们要做的事情就是把公钥 id_rsa.pub 的内容添加到 GitHub。复制公钥 id_rsa.pub 文件里的内容，你可以通过目录找到 id_rsa.pub 文件的位置，用记事本打开文件复制。如果你实在找不到文件也没有关系，按照以下步骤直接在 Git Bash 上打开就行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh </span><br><span class="line">$ ls</span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><img src="https://github.com/linin00/Cloud/blob/master/git00/3.jpg?raw=true" alt="3"><br>（再次注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和Shift+insert.）接下来进入我们的 GitHub 主页，先点击右上角，再点击 settings ：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/4.jpg?raw=true" alt="4"><br>如下图，先点击 SSH and GPG keys，再点击 New SSH key.<br><img src="https://github.com/linin00/Cloud/blob/master/git00/5.jpg?raw=true" alt="5"><br>将复制的公钥 id_rsa.pub 的内容粘贴到 key 内，再点击 Add SSH key，如下图：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/6.jpg?raw=true" alt="6"><br>验证是否成功，我们可以通过在 Git Bash 中输入 ssh -T <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;">&#103;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;</a> 进行检验：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/7.png?raw=true" alt="7"><br>第一次会出现这种情况，填 yes 就行，若出现下图中的情况，则表明绑定成功：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/8.png?raw=true" alt="8"></li></ul><h4 id="2-提交文件"><a href="#2-提交文件" class="headerlink" title="2.提交文件"></a>2.提交文件</h4><p>提交文件有两种方法：</p><p><strong>第一种：本地没有 git 仓库</strong></p><ol><li>直接将远程仓库 clone 到本地；</li><li>将文件添加并 commit 到本地仓库；</li><li>将本地仓库的内容push到远程仓库。</li></ol><p><strong>第二种：本地有 Git 仓库，并且我们已经进行了多次 commit 操作</strong></p><ol><li>建立一个本地仓库进入，init 初始化；</li><li>关联远程仓库；</li><li>同步远程仓库和本地仓库；</li><li>将文件添加提交到本地仓库；</li><li>将本地仓库的内容 push 到远程仓库。</li></ol><p><strong>第一种方法详细步骤：</strong><br>首先，进入GitHub个人主页：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/9.jpg?raw=true" alt="9"><br>点击进入我新建的 text 项目：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/10.jpg?raw=true" alt="10"><br>点击 Clone or download，再复制地址，然后进入我们准备存储 Git 仓库的目录，如下图：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/11.jpg?raw=true" alt="11"><br>接下来，输入 git clone <a href="https://github.com/linin00/text.git%EF%BC%8C%E5%B0%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">https://github.com/linin00/text.git，将远程仓库</a> clone 到本地，如下图：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/12.jpg?raw=true" alt="12"><br>我们看看 clone 到本地的仓库内容与远程仓库的内容，是否完全一致：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/13.jpg?raw=true" alt="13"><br>现在我们创建一个 text.txt 测试文件，如下图：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/14.jpg?raw=true" alt="14"><br>从此目录进入 Git Bash，输入 git status 命令查看仓库状态：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/15.jpg?raw=true" alt="15"><br>text 已经是一个 Git 仓库了，而我们刚刚创建的文件 text.txt 没有被追踪，也就是没有提交到本地仓库。现在我们使用 git add 命令将文件添加到了「临时缓冲区」，再用 git commit -m “提交信息” 将其提交到本地仓库，如下图：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/16.jpg?raw=true" alt="16"><br>如果你是第一次提交的话，就会出现下图的情况，会让你输入用户名和邮箱：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/17.jpg?raw=true" alt="17"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#你只要再加两行代码就行：</span></span><br><span class="line">$ git config --global user.name<span class="string">&quot;fengye97&quot;</span></span><br><span class="line">$ git config --global user.email<span class="string">&quot;***@***.com&quot;</span></span><br></pre></td></tr></table></figure><p>完成后输入 git log 命令查看仓库提交日志：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/18.jpg?raw=true" alt="18"><br>再输入 git status 查看一下仓库状态：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/19.jpg?raw=true" alt="19"><br>现在输入 git push origin master 命令，将本地仓库提交到远程仓库，origin是远程主机的名字：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/20.jpg?raw=true" alt="20"><br>第一次上传需要输入密码，验证成功后，如下图：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/21.jpg?raw=true" alt="21"><br>刷新 GitHub 中 text 仓库：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/22.jpg?raw=rue" alt="22"><br>这时我们的测试文件已经上传到了 text 仓库中。</p><p><strong>第二种方法详细步骤：</strong><br>首先，我们建立一个本地仓库 demo，使用 git init 命令初始化这个仓库，如下图:<br><img src="https://github.com/linin00/Cloud/blob/master/git00/23.jpg?raw=true" alt="23"><br><img src="https://github.com/linin00/Cloud/blob/master/git00/24.jpg?raw=true" alt="24"><br>输入 git remote add origin <a href="https://github.com/linin00/text.git">https://github.com/linin00/text.git</a> 命令，关联远程仓库，接着输入 git pull origin master 命令，同步远程仓库和本地仓库，如下图：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/25.jpg?raw=true" alt="25"><br>回到本地仓库，发现我们已经把远程仓库的内容同步到了本地仓库：<br><img src="https://github.com/linin00/Cloud/blob/master/git00/26.jpg?raw=true" alt="26"></p><p>接下来的步骤就与第一种方法一样（可以参考上面，已经写得很详细了），先输入 git add 和 git commit 命令，将要提交的文件添加并提交到 demo 仓库；然后再输入 git push origin master 命令，将本地仓库修改（或者添加）的内容提交到远程仓库就完成啦！！！</p><p><strong>参考文献</strong></p><ol><li><a href="https://blog.csdn.net/qq_35246620/article/details/69061355">利用 SSH 完成 Git 与 GitHub 的绑定 - CSDN</a></li><li><a href="https://www.cnblogs.com/kermitjam/p/10697185.html">Git与Github的连接与使用 - tank_jam - 博客园</a></li><li><a href="https://blog.csdn.net/qq_35246620/article/details/69230109">通过 Git 将代码提交到 GitHub（上）- CSDN</a></li><li><a href="https://blog.csdn.net/qq_35246620/article/details/69668846">通过 Git 将代码提交到 GitHub（下）- CSDN</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>you-get 使用</title>
      <link href="/2020/09/01/you-get-%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/01/you-get-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>You-Get是一个小型的命令行实用程序，用于从Web下载媒体内容（视频，音频，图像），以防没有其他方便的方法。<br>以下是从<a href="https://link.jianshu.com/?t=http://www.fsf.org/blogs/rms/20140407-geneva-tedx-talk-free-software-free-society">此网页</a>you-get下载视频的方法：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ you-get http://www.fsf.org/blogs/rms/20140407-geneva-tedx-talk-free-software-free-society</span><br><span class="line">Site: fsf.org</span><br><span class="line">Title: TEDxGE2014_Stallman05_LQ</span><br><span class="line">Type: WebM video (video/webm)</span><br><span class="line">Size: 27.12 MiB (28435804 Bytes)</span><br><span class="line">Downloading TEDxGE2014_Stallman05_LQ.webm ...</span><br><span class="line">100.0% ( 27.1/27.1 MB) ├████████████████████████████████████████┤[1/1] 12 MB/s</span><br></pre></td></tr></table></figure><p><strong>这里是为什么你可能想使用它：</strong></p><ul><li>你喜欢在互联网上的东西，只是想下载为自己的快乐。</li><li>您可以通过计算机在线观看自己喜爱的视频，但不能保存。你觉得你不能控制自己的电脑。（这不是一个开放的网络应该如何工作。）</li><li>您希望摆脱任何封闭源代码技术或专有JavaScript代码，并禁止在您的计算机上运行Flash等操作。</li><li>你是一个黑客文化和自由软件的坚持。</li></ul><p><strong>you-get可以为您做什么：</strong></p><ul><li>从流行的网站（如YouTube，优酷，Niconico等）下载视频/音频。（查看支持的网站的完整列表）</li><li>在媒体播放器中串流播放线上影片。没有网络浏览器，没有更多的广告。</li><li>通过抓取网页下载图像（感兴趣的）。</li><li>下载任意非HTML内容，即二进制文件。</li></ul><p>感兴趣？现在安装它，并通过示例开始。<br>你是Python程序员吗？然后检查源和fork它！<br><img src="https://i.imgur.com/GfthFAz.png"></p><p><strong>安装</strong><br>先决条件<br>以下依赖关系是必需的，必须单独安装，除非您在Windows上使用预构建的软件包或巧克力软件包：<br><a href="https://link.jianshu.com/?t=https://www.python.org/downloads/">Python 3</a><br><a href="https://link.jianshu.com/?t=https://www.ffmpeg.org/">FFmpeg</a>（强烈推荐）或<br><a href="https://link.jianshu.com/?t=https://libav.org/">Libav</a>（可选）<br><a href="https://link.jianshu.com/?t=https://rtmpdump.mplayerhq.hu/">RTMPDump</a><br><strong>选项1</strong>：通过pip安装官方发布的you-get是在<a href="https://link.jianshu.com/?t=https://pypi.python.org/pypi/you-get">PyPI</a>上发布的，可以通过<br><a href="https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Pip_(package_manager)">pip</a>包管理器从PyPI镜像轻松安装。<br>请注意，您必须使用Python 3版本pip：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install you-get</span><br></pre></td></tr></table></figure><p><strong>选项2</strong>：通过<a href="https://link.jianshu.com/?t=https://github.com/zsh-users/antigen">抗原</a>安装将以下行添加到您的.zshrc：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">antigen bundle soimort/you-get</span><br></pre></td></tr></table></figure><p><strong>选项3</strong>：使用预构建的软件包（仅限Windows）从以下位置下载exe（独立）或7z（包括所有依赖项）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[https](https://github.com/soimort/you-get/releases/latest)：[//github.com/soimort/you-get/releases/latest](https://github.com/soimort/you-get/releases/latest)。</span><br></pre></td></tr></table></figure><p><strong>选项4</strong>：从GitHub下载您可以下载<a href="https://link.jianshu.com/?t=https://github.com/soimort/you-get/archive/master.zip">稳定版</a>（与PyPI上的最新版本相同）或<a href="https://link.jianshu.com/?t=https://github.com/soimort/you-get/archive/develop.zip">开发</a>（更多修补程序，不稳定特性）分支you-get。解压缩它，并将包含you-get脚本的目录放入PATH。或者，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ [sudo] python3 setup.py install</span><br></pre></td></tr></table></figure><p>要么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 setup.py install --user</span><br></pre></td></tr></table></figure><p>安装you-get到永久路径。</p><p><strong>选项5</strong>：Git克隆这是所有开发人员的推荐方法，即使你不经常在Python中编码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/soimort/you-get.git</span><br></pre></td></tr></table></figure><p>然后把克隆的目录放到你的目录PATH，或者运行 ./setup.py install 安装you-get到一个永久的路径。</p><p><strong>选项6</strong>：使用<a href="https://link.jianshu.com/?t=https://chocolatey.org/">Chocolatey</a>（仅限Windows）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; choco install you-get</span><br></pre></td></tr></table></figure><p><strong>选项7</strong>：Homebrew（仅限Mac）<br>您可以you-get通过以下方式轻松安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install you-get</span><br></pre></td></tr></table></figure><p>壳完成Bash，Fish和Zsh的完成定义可以在<a href="https://link.jianshu.com/?t=https://you-get.org/contrib/completion">contrib/completion</a>。请参考您的shell手册，了解如何利用它们。</p><p><strong>升级</strong><br>根据您选择安装的选项you-get，您可以通过以下方式进行升级：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --upgrade you-get</span><br></pre></td></tr></table></figure><p>或通过以下方式下载最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get https://github.com/soimort/you-get/archive/master.zip</span><br></pre></td></tr></table></figure><p>或使用巧克力包管理器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; choco upgrade you-get</span><br></pre></td></tr></table></figure><p>为了获得最新的develop分支而不乱扔PIP，你可以尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --upgrade git+https://github.com/soimort/you-get@develop</span><br></pre></td></tr></table></figure><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p><strong>下载视频</strong></p><p>当您收到感兴趣的影片时，您可以使用–info/ -i选项查看所有可用的品质和格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ you-get -i <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span><br><span class="line">site: YouTube</span><br><span class="line">title: Me at the zoo</span><br><span class="line">streams: <span class="comment"># Available quality and codecs</span></span><br><span class="line">[ DEFAULT ] _________________________________</span><br><span class="line">- itag: 43</span><br><span class="line">container: webm</span><br><span class="line">quality: medium</span><br><span class="line">size: 0.5 MiB (564215 bytes)</span><br><span class="line"><span class="comment"># download-with: you-get --itag=43 [URL]</span></span><br><span class="line"></span><br><span class="line">- itag: 18</span><br><span class="line">container: mp4</span><br><span class="line">quality: medium</span><br><span class="line"><span class="comment"># download-with: you-get --itag=18 [URL]</span></span><br><span class="line"></span><br><span class="line">- itag: 5</span><br><span class="line">container: flv</span><br><span class="line">quality: small</span><br><span class="line"><span class="comment"># download-with: you-get --itag=5 [URL]</span></span><br><span class="line"></span><br><span class="line">- itag: 36</span><br><span class="line">container: 3gp</span><br><span class="line">quality: small</span><br><span class="line"><span class="comment"># download-with: you-get --itag=36 [URL]</span></span><br><span class="line"></span><br><span class="line">- itag: 17</span><br><span class="line">container: 3gp</span><br><span class="line">quality: small</span><br><span class="line"><span class="comment"># download-with: you-get --itag=17 [URL]</span></span><br></pre></td></tr></table></figure><p>标记的格式DEFAULT是您将默认获得的格式。如果这看起来很酷，你下载它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ you-get <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span><br><span class="line">site: YouTube</span><br><span class="line">title: Me at the zoo</span><br><span class="line">stream:</span><br><span class="line">- itag: 43</span><br><span class="line">container: webm</span><br><span class="line">quality: medium</span><br><span class="line">size: 0.5 MiB (564215 bytes)</span><br><span class="line"><span class="comment"># download-with: you-get --itag=43 [URL]</span></span><br><span class="line"></span><br><span class="line">Downloading zoo.webm ...</span><br><span class="line">100.0% ( 0.5/0.5 MB) ├████████████████████████████████████████┤[1/1] 7 MB/s</span><br><span class="line"></span><br><span class="line">Saving Me at the zoo.en.srt ...Done.</span><br></pre></td></tr></table></figure><p>（如果YouTube视频有任何字幕，则会以视频文件格式以SubRip字幕格式与视频文件一起下载。）或者，如果您喜欢其他格式（mp4），只需使用you-get向您显示的选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get --itag=18 <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<br>·在这一点上，我们的大多数支持网站通常没有实现格式选择; 在这种情况下，要下载的默认格式是质量最高的格式。<br>·ffmpeg是一个必需的依赖项，用于下载和加入流式传输的多个部分（例如在一些网站如优酷），以及1080p或高分辨率的YouTube视频的视频。<br>如果you-get在下载后不想加入视频部分，请使用–no-merge/ -n选项。</p><p>下载其他任何内容<br>如果您已拥有所需资源的网址，可以直接通过以下网址下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ you-get https://stallman.org/rms.jpg</span><br><span class="line">Site: stallman.org</span><br><span class="line">Title: rms</span><br><span class="line">Type: JPEG Image (image/jpeg)</span><br><span class="line">Size: 0.06 MiB (66482 Bytes)</span><br><span class="line"></span><br><span class="line">Downloading rms.jpg ...</span><br><span class="line">100.0% ( 0.1/0.1 MB) ├████████████████████████████████████████┤[1/1] 127 kB/s</span><br></pre></td></tr></table></figure><p><em>否则，you-get将刮取网页，并尝试找出是否有什么有趣的你</em>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ you-get http://kopasas.tumblr.com/post/69361932517</span><br><span class="line">Site: Tumblr.com</span><br><span class="line">Title: kopasas</span><br><span class="line">Type: Unknown <span class="built_in">type</span> (None)</span><br><span class="line">Size: 0.51 MiB (536583 Bytes)</span><br><span class="line"></span><br><span class="line">Site: Tumblr.com</span><br><span class="line">Title: tumblr_mxhg13jx4n1sftq6do1_1280</span><br><span class="line">Type: Portable Network Graphics (image/png)</span><br><span class="line">Size: 0.51 MiB (536583 Bytes)</span><br><span class="line"></span><br><span class="line">Downloading tumblr_mxhg13jx4n1sftq6do1_1280.png ...</span><br><span class="line">100.0% ( 0.5/0.5 MB) ├████████████████████████████████████████┤[1/1] 22 MB/s</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<br>这个功能是一个实验性的，远非完美。它最适合从诸如Tumblr和Blogger等流行网站上抓取大型图片，但实际上没有通用模式可以应用到互联网上的任何网站。</p><ul><li>在Google视频中搜索并下载</li></ul><p>你可以传递任何东西you-get。如果网址不是有效的网址，you-get则会执行Google搜索并为您下载最相关的视频。（这可能不是你想看到的，但仍然很可能。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get <span class="string">&quot;Richard Stallman eats&quot;</span></span><br></pre></td></tr></table></figure><p>暂停和恢复下载您可以使用Ctrl+ C中断下载。临时.download文件保留在输出目录中。下次you-get使用相同的参数运行时，下载进度将从上一个会话恢复。如果文件被完全下载（临时.download扩展名已删除），you-get将跳过下载。</p><p>要强制重新下载，请使用–force/ -f选项。（警告：这样做会覆盖任何现有文件或具有相同名称的临时文件！）</p><ul><li>设置下载文件的路径和名称</li></ul><p>使用–output-dir/ -o选项设置路径，和–output-filename/ -O设置下载文件的名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get -o ~/Videos -O zoo.webm <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong>：</p><ol><li>如果您遇到默认视频标题（可能包含与当前shell /操作系统/文件系统不兼容的特殊字符）时遇到问题，这些选项很有用。</li><li>如果您将脚本写入批处理下载文件并将其放入指定名称的文件夹中，这些选项也很有用。</li></ol><ul><li>代理设置<br>您可以you-get通过–http-proxy/ -x选项指定要使用的HTTP代理：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get -x 127.0.0.1:8087 <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span><br></pre></td></tr></table></figure>但是，http_proxy默认情况下应用系统代理设置（即环境变量）。要禁用任何代理，请使用该–no-proxy选项。</li></ul><p>提示：<br>如果你需要使用代理了很多（如果您的网络阻止某些网站），你可能希望使用you-get与proxychains并设置alias you-get=”proxychains -q you-get”（Bash中）。</p><p>对于某些网站（例如优酷），如果您需要访问仅在中国大陆可用的一些视频，可以使用特定代理从网站提取视频信息：–extractor-proxy/ -y。</p><ul><li>观看视频<br>使用–player/ -p选项将视频馈送到您选择的媒体播放器，例如mplayer或vlc，而不是下载：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get -p vlc <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span><br></pre></td></tr></table></figure>或者，如果您更喜欢在浏览器中观看视频，只需没有广告或评论部分：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ you-get -p chromium <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>提示</strong>：<br>可以使用该-p选项来启动另一个下载管理器，例如you-get -p uget-gtk ‘<a href="https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;">https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</a><br>，尽管它们可能不能一起播放很好。</p><ul><li>加载Cookie<br>并非所有视频都向任何人公开。如果您需要登录帐户以访问某些内容（例如，私人视频），则无法you-get通过–cookies/ -c选项向浏览器提供Cookie 。</li></ul><p><strong>注意</strong>：<br>到目前为止，我们支持两种格式的浏览器Cookie：Mozilla cookies.sqlite和Netscape cookies.txt。</p><ul><li>重新使用提取的数据<br>使用–url/ -u获取从页面提取的可下载资源URL的列表。用于–json以JSON格式获取抽取数据的摘要。</li></ul><p><strong>警告</strong>：<br>从目前来看，这个功能已经</p><p>不能被稳定和JSON模式可能会在未来的重大更改。</p><p><strong>支持的网站</strong><br><img src="https://github.com/linin00/Cloud/blob/master/1.png?raw=true" alt="1"><br><img src="https://github.com/linin00/Cloud/blob/master/2.png?raw=true" alt="2"><br><img src="https://github.com/linin00/Cloud/blob/master/3.png?raw=true" alt="3"><br><img src="https://github.com/linin00/Cloud/blob/master/4.png?raw=true" alt="4"><br>对于不在列表中的所有其他网站，通用提取器将负责从页面中查找和下载有趣的资源。</p><p><strong>已知的错误</strong><br>如果事情被打破，you-get不能得到你想要的东西，不要惊慌。（是的，这一直发生！）</p><p>检查它是否已经是<a href="https://github.com/soimort/you-get/wiki/Known-Bugs%E4%B8%8A%E7%9A%84%E5%B7%B2%E7%9F%A5%E9%97%AE%E9%A2%98%EF%BC%8C%E5%B9%B6%E6%90%9C%E7%B4%A2%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%97%E8%A1%A8%E3%80%82">https://github.com/soimort/you-get/wiki/Known-Bugs上的已知问题，并搜索打开的问题列表。</a><br>如果尚未报告，请打开一个新问题，并附加详细的命令行输出。</p><p><strong>卷入</strong><br>你可以在Gitter通道＃soimort / you-get（这里是如何为Gitter 设置IRC客户端）与我们联系。如果你有一个快速问题you-get，请在那里。</p><p>欢迎各种拉式请求。但是，有几个准则：该develop分支是你拉的请求应该去。</p><p><strong>记住rebase</strong><br>清楚记录您的公关，如果适用，提供一些示例链接供审核人员测试。<br>编写格式良好，易于理解的提交消息。<br>如果你不知道如何，看看现有的。<br>我们不会要求您签署CLA，但您必须确保您的代码可以合法重新分发（根据MIT许可证的条款）。</p><p><strong><strong>法律问题</strong></strong><br>此软件根据MIT许可证分发。</p><p>特别是，请注意</p><p>*本软件按“原样”提供，不提供任何明示或暗示的保证，包括但不限于适销性，适用于特定用途和非侵权的保证。</p><p>*在任何情况下，作者或版权持有者对因本软件或其他使用或其他交易而产生的任何索赔，损害或其他责任，无论是合同，侵权还是其他方式，软件。</p><p>翻译成人类的话：</p><p>*如果您使用该软件构成侵犯版权的基础，或者您将该软件用于任何其他非法目的，作者不能对您承担任何责任。</p><p>*我们只在这里运送代码，你如何使用它是由你自己决定。</p><p>GitHub 主页 : <a href="https://github.com/soimort/you-get">https://github.com/soimort/you-get</a><br>参考博客：<a href="http://blog.csdn.net/abel_qy/article/details/51067964">http://blog.csdn.net/abel_qy/article/details/51067964</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> you-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>early start</title>
      <link href="/2020/09/01/early-start/"/>
      <url>/2020/09/01/early-start/</url>
      
        <content type="html"><![CDATA[<p>Windows 10 上安装了 wallpaperengine 用来美化桌面，虽然它被设置为开机自启，但是在进入桌面后很长一段时间内它还处于启动状态，桌面文件不能迅速加载出来。受如何调整 Windows 10 软件开机启动顺序启发，将这一过程记录下来，加入了一些细节、注意事项以及如何卸载。</p><a id="more"></a><p><strong>安装过程</strong><br>首先，给出下面会使用到的工具的 repo：sylveon/EarlyStart</p><ol><li><p>到 <a href="https://github.com/sylveon/EarlyStart/releases">release page</a> 下载，我此时使用的是 1.0.0 版本。下载完后解压，并将文件夹放置在一个固定位置，比如我的是 D:\Code\EarlyStart</p></li><li><p>右键选中 EarlyStart.exe，在属性中常规 - 安全下取消勾选。如果和我一样，没有这个复选框的话，那就不用管。</p></li><li><p>以管理员身份运行 CMD，进入第一步中的文件夹路径。如果你和我一样也将其放置在非系统盘，那么需要加 /d 参数才行，比如我的是 cd /d D:\Code\EarlyStart（好像不加也行）</p></li><li><p>接着运行 %windir%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe .\EarlyStart.exe，应该会有成功完成之类的字样，可以关闭 CMD 了<br><img src="https://upyun.iamzs.cn/2001/EarlyStart.png" alt="安装过程"></p></li></ol><p><strong>EarlyStart</strong></p><ol><li>在用户文件夹下，即 C:\Users&lt;username&gt; 下新建一个 .earlystart 文件，然后将想要 earlystart 的应用程序路径每行写入一个。比如我的是 “C:\Program Files (x86)\Stardock\Fences\Fences.exe”</li></ol><p><strong>注意</strong>：如果你写入上述文件的某一行程序路径无效的话，那么在这之后指定的任何程序都不会被 earlystart</p><ol start="2"><li>重启观察是否有变化</li></ol><p><strong>如何卸载</strong></p><ol><li><p>以管理员身份运行 CMD，进入上述第一步的文件夹内</p></li><li><p>运行 %windir%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe /u .\EarlyStart.exe 提示成功之类的字样就 OK 了</p></li><li><p>删除 .earlystart 文件，如果喜欢的话</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> early start </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg使用：抽取视频、抽取音频、音视频合成，etc</title>
      <link href="/2020/09/01/ffmpeg%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/01/ffmpeg%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>抽取音频命令</strong><br>ffmpeg -i 3.mp4 -vn -y -acodec copy 3.aac<br>ffmpeg -i 3.mp4 -vn -y -acodec copy 3.m4a</p><a id="more"></a><p><strong>提取视频 （Extract Video）</strong><br>ffmpeg -i Life.of.Pi.has.subtitles.mkv -vcodec copy –an  videoNoAudioSubtitle.mp4</p><p><strong>音视频合成命令</strong><br>ffmpeg -i video2.avi -i audio.mp3 -vcodec copy -acodec copy output.avi</p><p><strong>查看音视频文件信息命令</strong><br>ffmpeg -i 3.mp4<br>ffmpeg -i 3.aac<br>ffmpeg -i 3.m4a</p><p>其中aac和ac3是音频编码格式。<br>aac全名是Advanced Audio Coding，后缀名一般为m4a、aac、mp4、mkv等，其中mp4、mkv为视频格式，采样率一般为44.1khz，码率一般是64kbps到192kbps，声道一般为双声道立体声。<br>ac3全称是（Dolby）Audio Codec 3，一般出现在DVD视频格式中，后缀名为vob，采样率一般为48khz，码率一般是192kbps到384kbps，声道为双声道或6声道。</p><pre><code class="bash">system(&quot;./ffmpeg -threads 1 -i $latline  -vn -ar 8000 -ac 1 -ab 64k   -acodec pcm_alaw   -f wav  $transline&quot;);Input #0, wav, from &#39;BUSautoClassify_9223370567097361188_3d45d8e5-897d-4dfc-9aa7-336f36d130ad.wav&#39;:  Metadata:    encoder         : Lavf55.33.100  Duration: 00:03:37.58, bitrate: 64 kb/s    Stream #0:0: Audio: pcm_alaw ([6][0][0][0] / 0x0006), 8000 Hz, mono, s16, 64 kb/sInput #0, wav, from &#39;BUSautoClassify_9223370566822417912_7c3207ed-1801-4ce0-8845-2ff6c8e00a64.wav&#39;:  Metadata:    encoder         : Lavf57.56.100  Duration: 00:04:47.32, bitrate: 64 kb/s    Stream #0:0: Audio: pcm_alaw ([6][0][0][0] / 0x0006), 8000 Hz, mono, s16, 64 kb/s```encoder 版本不同，转码速度就不同。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础入门</title>
      <link href="/2020/08/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a><a href="https://baike.baidu.com/item/%E5%89%8D%E7%AB%AF/5956545">前端</a></h3><p>前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5，CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，合适的动效设计，给用户带来极高的用户体验。–《百度百科》</p><a id="more"></a><h5 id="下面是B站上号称小白看一遍就会的前端基础入门视频"><a href="#下面是B站上号称小白看一遍就会的前端基础入门视频" class="headerlink" title="下面是B站上号称小白看一遍就会的前端基础入门视频"></a>下面是B站上号称<a href="https://www.bilibili.com/video/BV1pE411q7FU/?p=223">小白看一遍就会的前端基础入门</a>视频</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;&lt;iframe </span><br><span class="line">src&#x3D;&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV1pE411q7FU?p&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; </span><br><span class="line">frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot; style&#x3D;&quot;position: absolute; width: 100%; </span><br><span class="line">height: 100%; left: 0; top: 0;&quot;&gt; &lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;</span><br><span class="line">2020-08-13（会自动重定向到B站，不知道怎么解决，烦）</span><br></pre></td></tr></table></figure><p>加油，奥利给！<div style="text-align:center;color: #ccc;font-size:16px;"><font color=#f7b1bb >ｸﾞｯ!(๑•̀ㅂ•́)و✧</font></div></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ｸﾞｯ!(๑•̀ㅂ•́)و✧</title>
      <link href="/2020/08/13/%E7%BD%AE%E9%A1%B6/"/>
      <url>/2020/08/13/%E7%BD%AE%E9%A1%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/08/13/jwFupG2TKYWb3PQ.jpg"><br><img src="https://github.com/linin00/Cloud/blob/master/lianjie.png?raw=true" alt="课表"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用链接</title>
      <link href="/2020/08/13/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5/"/>
      <url>/2020/08/13/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p><a href="https://hexo.io/zh-cn/docs/index.html">hexo官方文档</a><br><a href="https://zhuanlan.zhihu.com/p/69211731?utm_source=wechat_session&utm_medium=social&utm_oi=1127514106219028480">hexo美化</a><br><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html">微信小程序官方文档</a><br><a href="https://markdown-zh.readthedocs.io/en/latest/">Markdown中文文档</a><br><a href="https://blog.csdn.net/u011419965/article/details/50536937">Markdown-语法-示例-字体-颜色</a><br><a href="https://blog.csdn.net/heimu24/article/details/81189700">Markdown进阶（更改字体、颜色、大小，设置文字背景色，调整图片大小设置居中）</a><br><a href="https://sm.ms/">图床</a></p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p><a href="https://kangchou001.cn/">诗和远方biubiu</a><br><a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/">TRHX’S BLOG</a><br><a href="https://diygod.me/">diygod</a></p>]]></content>
      
      
      <categories>
          
          <category> 链接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频链接1</title>
      <link href="/2020/08/13/%E8%A7%86%E9%A2%91%E9%93%BE%E6%8E%A51/"/>
      <url>/2020/08/13/%E8%A7%86%E9%A2%91%E9%93%BE%E6%8E%A51/</url>
      
        <content type="html"><![CDATA[<h3 id="基础知识入门"><a href="#基础知识入门" class="headerlink" title="基础知识入门"></a>基础知识入门</h3><p><a href="https://www.bilibili.com/video/BV1pE411q7FU?p=1">小白看一遍就会的前端基础入门</a><br><a href="https://www.bilibili.com/video/BV1ux411d75J/">JavaScript开发必会基础</a><br><a href="https://www.bilibili.com/video/BV1k4411w7sV/">JavaScript核心 DOM BOM操作</a><br><a href="https://www.bilibili.com/video/BV1pt411H7D6/">4天玩转jQuery入门</a><br><a href="https://www.bilibili.com/video/BV12J411m7MG/?p=31">快速入门vue.js</a><br><a href="https://www.bilibili.com/video/BV1nE41117BQ/">爆款微信小程序</a></p><h3 id="前端实战项目"><a href="#前端实战项目" class="headerlink" title="前端实战项目"></a>前端实战项目</h3><p><a href="https://www.bilibili.com/video/BV1nW411Z7kT/">乐淘移动商城</a><br><a href="https://www.bilibili.com/video/BV1nx411E7Rh/">百度外卖</a></p><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p><a href="https://www.bilibili.com/video/BV1nE41117BQ">零基础玩转微信小程序</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准备返校 ✧*｡٩(ˊωˋ*)و✧*｡</title>
      <link href="/2020/08/13/%E5%87%86%E5%A4%87%E8%BF%94%E6%A0%A1/"/>
      <url>/2020/08/13/%E5%87%86%E5%A4%87%E8%BF%94%E6%A0%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="上了一学期嘉立顿大学，终于可以回学校了-╥ω╥-（流下老母亲的泪水-jpg）"><a href="#上了一学期嘉立顿大学，终于可以回学校了-╥ω╥-（流下老母亲的泪水-jpg）" class="headerlink" title="上了一学期嘉立顿大学，终于可以回学校了 (╥ω╥`)  （流下老母亲的泪水.jpg）"></a>上了一学期嘉立顿大学，终于可以回学校了 (╥ω╥`)  （流下老母亲的泪水.jpg）</h1><p><img src="https://i.loli.net/2020/08/13/tlLvn9XxaiNKjuf.png" alt="回校注意事项"><br>（悄咪咪）“随申码”是个啥玩意？？？？？（ps:刚刚知道了<a id="more"></a><br>不过麻烦事还是超级多，两门线下考，不过过了这一阵子，又可以过上没羞没臊的奋斗生活了</p><h2 id="一个软件工程的学子！୧-⁼̴̶̤̀ω⁼̴̶̤́-૭"><a href="#一个软件工程的学子！୧-⁼̴̶̤̀ω⁼̴̶̤́-૭" class="headerlink" title="一个软件工程的学子！୧( ⁼̴̶̤̀ω⁼̴̶̤́ )૭"></a>一个软件工程的学子！୧( ⁼̴̶̤̀ω⁼̴̶̤́ )૭</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 　  ∧_∧::</span><br><span class="line"> 　 (´･ω･`)::</span><br><span class="line">  /⌒　　⌒)::</span><br><span class="line"> /へ_＿  / /::</span><br><span class="line">(＿＼＼  ﾐ)/::</span><br><span class="line">　 ｜ `-イ::</span><br><span class="line">　 /ｙ　 )::</span><br><span class="line">　/／  ／::</span><br><span class="line">／　／::</span><br><span class="line">(　く:::</span><br><span class="line">|＼ ヽ:::</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web开发起步</title>
      <link href="/2020/08/13/web%E5%BC%80%E5%8F%91%E8%B5%B7%E6%AD%A5/"/>
      <url>/2020/08/13/web%E5%BC%80%E5%8F%91%E8%B5%B7%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>对着教程搭了自己的第一个博客，虽然还是什么都不懂，还是感到非常兴奋😂😂😂😂<br>小步快跑,快速迭代,希望以后能越来越好吧!</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在hexo中插入图片与视频的方法</title>
      <link href="/2020/08/11/%E5%9C%A8hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E4%B8%8E%E8%A7%86%E9%A2%91%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/08/11/%E5%9C%A8hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E4%B8%8E%E8%A7%86%E9%A2%91%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h1><p>Hexo 有多种图片插入方式，可将图片放在本地或CDN引用</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![我的照片](https://i.loli.net/2020/08/11/ANEMbFekhSGsUvV.jpg)</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>没有空格，重音符```<br>这种方法无法自定义图片样式<br>例<br><img src="https://i.loli.net/2020/08/11/ANEMbFekhSGsUvV.jpg" alt="我的照片"></p><a id="more"></a><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>（待续）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="视频插入"><a href="#视频插入" class="headerlink" title="视频插入"></a>视频插入</h1><p>（B站紫颜小姐姐）</p><h2 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;视频网址&quot;</span> scrolling=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> frameborder=<span class="string">&quot;no&quot;</span> framespacing=<span class="string">&quot;0&quot;</span> allowfullscreen=<span class="string">&quot;true&quot;</span> width=<span class="string">&quot;100%&quot;</span>  height=<span class="string">&quot;580&quot;</span> quality=<span class="string">&quot;high&quot;</span> &gt; &lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=<span class="string">&quot;https://www.bilibili.com/video/BV1Cf4y117F1&quot;</span> scrolling=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> frameborder=<span class="string">&quot;no&quot;</span> framespacing=<span class="string">&quot;0&quot;</span> allowfullscreen=<span class="string">&quot;true&quot;</span> width=<span class="string">&quot;100%&quot;</span>  height=<span class="string">&quot;580&quot;</span> quality=<span class="string">&quot;high&quot;</span> &gt; &lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>但是手机端不能自适应，你以为这就完了？</p><h2 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;&lt;iframe </span><br><span class="line">src=<span class="string">&quot;视频地址&quot;</span> scrolling=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> </span><br><span class="line">frameborder=<span class="string">&quot;no&quot;</span> framespacing=<span class="string">&quot;0&quot;</span> allowfullscreen=<span class="string">&quot;true&quot;</span> style=<span class="string">&quot;position: absolute; width: 100%; </span></span><br><span class="line"><span class="string">height: 100%; left: 0; top: 0;&quot;</span>&gt; &lt;/iframe&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;&lt;iframe </span><br><span class="line">src=<span class="string">&quot;https://www.bilibili.com/video/BV1rQ4y1N7Xv&quot;</span> scrolling=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> </span><br><span class="line">frameborder=<span class="string">&quot;no&quot;</span> framespacing=<span class="string">&quot;0&quot;</span> allowfullscreen=<span class="string">&quot;true&quot;</span> style=<span class="string">&quot;position: absolute; width: 100%; </span></span><br><span class="line"><span class="string">height: 100%; left: 0; top: 0;&quot;</span>&gt; &lt;/iframe&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer <span class="string">&quot;url=https://www.bilibili.com/video/BV1rQ4y1N7Xv&quot;</span>  <span class="string">&quot;pic=http://home.ustc.edu.cn/~mmmwhy/GEM.jpg&quot;</span> <span class="string">&quot;loop=yes&quot;</span> <span class="string">&quot;theme=#FADFA3&quot;</span> <span class="string">&quot;autoplay=false&quot;</span> <span class="string">&quot;token=tokendemo&quot;</span> %&#125;</span><br></pre></td></tr></table></figure><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p><a href="https://www.jianshu.com/p/26a7fc7cc185">Hexo博客中插入音乐/视频/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2020/08/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/08/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>啦啦啦，我的个人博客诞生了！🤣🤣🤣🤣🤣（还不太会写）</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/10/hello-world/"/>
      <url>/2020/08/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
