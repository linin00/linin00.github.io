<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ｸﾞｯ!(๑•̀ㅂ•́)و✧</title>
    <link>http://yoursite.com/</link>
    
    <atom:link href="http://yoursite.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>人不努力的时候，老天爷是会一点一点把你的天赋收走的</description>
    <pubDate>Wed, 30 Sep 2020 09:19:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>L_ink_card</title>
      <link>http://yoursite.com/2020/09/30/L-ink-card/</link>
      <guid>http://yoursite.com/2020/09/30/L-ink-card/</guid>
      <pubDate>Wed, 30 Sep 2020 09:10:19 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;L-ink-电子墨水屏NFC智能卡片&quot;&gt;&lt;a href=&quot;#L-ink-电子墨水屏NFC智能卡片&quot; class=&quot;headerlink&quot; title=&quot;[L-ink]电子墨水屏NFC智能卡片&quot;&gt;&lt;/a&gt;[L-ink]电子墨水屏NFC智能卡片&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是为了解决个人使用IC卡时遇到的一些痛点设计的一个迷你NFC智能卡片，基于STM32L051和ST25DV。&lt;/p&gt;
&lt;p&gt;想着既然要自制这玩意那就往炫酷了做，于是很自觉地把电子墨水屏也加上了，顺手也写了个配套APP用于显示内容定制。&lt;/p&gt;
&lt;p&gt;总之是个比较有意思的小项目，方案不算复杂，第一版设计也存在一些值得改进的地方，后续有空会继续优化方案设计的。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="L-ink-电子墨水屏NFC智能卡片"><a href="#L-ink-电子墨水屏NFC智能卡片" class="headerlink" title="[L-ink]电子墨水屏NFC智能卡片"></a>[L-ink]电子墨水屏NFC智能卡片</h1><blockquote><p>这是为了解决个人使用IC卡时遇到的一些痛点设计的一个迷你NFC智能卡片，基于STM32L051和ST25DV。</p><p>想着既然要自制这玩意那就往炫酷了做，于是很自觉地把电子墨水屏也加上了，顺手也写了个配套APP用于显示内容定制。</p><p>总之是个比较有意思的小项目，方案不算复杂，第一版设计也存在一些值得改进的地方，后续有空会继续优化方案设计的。</p></blockquote><a id="more"></a><p><img src="https://github.com/peng-zhihui/L-ink_Card/raw/master/Image/L-ink_V0.5.jpg"></p><h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p>B站指路：<a href="https://www.bilibili.com/video/BV1Cf4y1y7KT/">https://www.bilibili.com/video/BV1Cf4y1y7KT/</a></p><h2 id="项目文件说明"><a href="#项目文件说明" class="headerlink" title="项目文件说明"></a>项目文件说明</h2><ul><li><strong>Hardware</strong>：source里面是电路原理图和PCB文件，使用Altium Designer打开；release里面是gerber文件可以直接发给厂家打样，也包含了元器件BOM表（部分IC不太常用可能要单独购买）。</li><li><strong>Firmware</strong>：STM32L051的固件，我提供了Clion和Keil两个版本的工程文件，源码内容是一致的，分两个版本只是因为个人对Clion爱得深沉。</li><li><strong>3D Model</strong>：屏幕架和外壳的3D文件，step格式一般3D建模软件都能打开编辑，STL格式用于直接3D打印。</li><li><strong>DAP-Link</strong>：自己设计的下载调试器的硬件和固件源码，也包括预编译的hex固件，如果你有J-Link或者ST-Link之类的下载器就不用这个了。</li><li><strong>Android</strong>：配套的APP安装包。</li></ul><h2 id="固件编译说明"><a href="#固件编译说明" class="headerlink" title="固件编译说明"></a>固件编译说明</h2><p>STM32因为使用了L0系列的MCU，所以如果你是第一次在你的电脑上开发STM32L0，那么需要先装一下L0的固件支持包，有两种方式：</p><ol><li><p>使用STM32CubMX安装：</p><p><img src="https://github.com/peng-zhihui/L-ink_Card/raw/master/Image/bsp1.jpg"></p><p><img src="https://github.com/peng-zhihui/L-ink_Card/raw/master/Image/bsp2.jpg"></p></li><li><p>使用Keil的Package Installer安装：</p><p><img src="https://github.com/peng-zhihui/L-ink_Card/raw/master/Image/bsp3.jpg"></p><p><img src="https://github.com/peng-zhihui/L-ink_Card/raw/master/Image/bsp4.jpg"></p></li></ol><p>然后就不会报头文件的错误了。</p><p>有几点注意的：</p><ul><li>如果想在Clion中编译工程的话可以参考我这篇教程：<a href="https://zhuanlan.zhihu.com/p/145801160">https://zhuanlan.zhihu.com/p/145801160</a></li><li>Clion中OpenOCD默认是使用ST-Link下载，其他下载器自己修改工程目录下的stlink.cfg文件</li></ul><h2 id="关于硬件方案"><a href="#关于硬件方案" class="headerlink" title="关于硬件方案"></a>关于硬件方案</h2><p>硬件方案比较简单，主要IC就两个–STM32和ST25DV，电子墨水屏是200x200的单色屏幕，我是买的微雪的（注意如果是买的几年前的库存，那驱动芯片会有点区别导致代码不通用，只要是新款的应该都没问题）。</p><p>ST25DV作为NFC的PHY通过I2C总线和STM32通信，主要作用有两个：能量采集以及NFC通信。注意，ST25DV只是负责和手机进行NFC通信，而不负责IC卡的读写功能，因为<strong>ST25DV只支持ISO 15693的RFID协议，而我们常用的IC卡（M1卡）是ISO 14443协议的</strong>，所以并不能直接使用这颗芯片进行IC卡模拟。</p><p>IC卡的模拟功能这一版中实现得比较简单，就是直接集成了多颗UID芯片（很便宜，1~2元一片），然后和ST25DV共用NFC天线，卡片的切换是通过拨轮换挡实现的。好处在于，你可以把L-ink当作多张独立卡片的合集处理，复制和刷卡都是很直接的（使用PM3或者PN532等模块读取原卡信息并写入L-link）。当然缺点就是添加的卡片一多，按键的数量就要增加（因为每一档对应一张卡）。</p><p>所以我也在改进方案，后面可能会使用支持ISO 14443协议的ST95或者ST25T系列的芯片来实现软件层面的IC卡模拟功能。</p><p>另外下一个版本的硬件方案<strong>我会把黑白的电子墨水屏换成彩色的</strong>。</p><h2 id="关于配套APP"><a href="#关于配套APP" class="headerlink" title="关于配套APP"></a>关于配套APP</h2><p>Android APP目前只是实现了功能，这是基于我以前做的一个算法验证框架APP改的，UI还没有重新做设计，可以等后续更新。</p><p>工程文件的话我后面可以把其中的核心功能模块封装成Module，然后给个Sample Project供参考使用，工作太忙等我缓过这阵子先~</p><h2 id="教程整理中…"><a href="#教程整理中…" class="headerlink" title="教程整理中…"></a>教程整理中…</h2><p>有问题先看Issue（包括已经close的），另外</p><h4 id="跟项目工程无关的问题不要发在Issues里面！跟项目工程无关的问题不要发在Issues里面！跟项目工程无关的问题不要发在Issues里面！"><a href="#跟项目工程无关的问题不要发在Issues里面！跟项目工程无关的问题不要发在Issues里面！跟项目工程无关的问题不要发在Issues里面！" class="headerlink" title="跟项目工程无关的问题不要发在Issues里面！跟项目工程无关的问题不要发在Issues里面！跟项目工程无关的问题不要发在Issues里面！"></a>跟项目工程无关的问题不要发在Issues里面！跟项目工程无关的问题不要发在Issues里面！跟项目工程无关的问题不要发在Issues里面！</h4><p>聊天内容可以给我发评论或者私信（B站、知乎），我看到的话基本都会回复，issue里面发的话所有watch项目的人都会收到邮件，会对大家产生困扰的！</p>]]></content:encoded>
      
      
      
      
      <comments>http://yoursite.com/2020/09/30/L-ink-card/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>信息轰炸</title>
      <link>http://yoursite.com/2020/09/12/%E4%BF%A1%E6%81%AF%E8%BD%B0%E7%82%B8/</link>
      <guid>http://yoursite.com/2020/09/12/%E4%BF%A1%E6%81%AF%E8%BD%B0%E7%82%B8/</guid>
      <pubDate>Sat, 12 Sep 2020 15:31:11 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set wshshell&#x3D;wscript.createobject(&quot;wscript.shell&quot;) </span><br><span class="line">wshshell.AppActivate&quot;窗口名称&quot; </span><br><span class="line">for i&#x3D;1 to 10   &#x2F;&#x2F;循环次数</span><br><span class="line">wscript.sleep 100   &#x2F;&#x2F;发送间隔  </span><br><span class="line">wshshell.sendKeys &quot;^v&quot; </span><br><span class="line">wshshell.sendKeys i   &#x2F;&#x2F;数字提示</span><br><span class="line">wshshell.sendKeys &quot;%s&quot; </span><br><span class="line">next</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://yoursite.com/categories/%E5%A5%BD%E7%8E%A9/">好玩</category>
      
      
      <category domain="http://yoursite.com/tags/%E5%A5%BD%E7%8E%A9/">好玩</category>
      
      
      <comments>http://yoursite.com/2020/09/12/%E4%BF%A1%E6%81%AF%E8%BD%B0%E7%82%B8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ffmpeg命令示例</title>
      <link>http://yoursite.com/2020/09/05/ffmpeg%E5%91%BD%E4%BB%A4%E7%A4%BA%E4%BE%8B/</link>
      <guid>http://yoursite.com/2020/09/05/ffmpeg%E5%91%BD%E4%BB%A4%E7%A4%BA%E4%BE%8B/</guid>
      <pubDate>Sat, 05 Sep 2020 12:59:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/67878761&quot;&gt;待完成&lt;/a&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/67878761">待完成</a></p>]]></content:encoded>
      
      
      <category domain="http://yoursite.com/categories/ffmpeg/">ffmpeg</category>
      
      
      <category domain="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/">技术</category>
      
      <category domain="http://yoursite.com/tags/ffmpeg/">ffmpeg</category>
      
      
      <comments>http://yoursite.com/2020/09/05/ffmpeg%E5%91%BD%E4%BB%A4%E7%A4%BA%E4%BE%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Markdown指南（新手）</title>
      <link>http://yoursite.com/2020/09/05/Markdown%E6%8C%87%E5%8D%97%EF%BC%88%E6%96%B0%E6%89%8B%EF%BC%89/</link>
      <guid>http://yoursite.com/2020/09/05/Markdown%E6%8C%87%E5%8D%97%EF%BC%88%E6%96%B0%E6%89%8B%EF%BC%89/</guid>
      <pubDate>Sat, 05 Sep 2020 11:10:52 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/&quot;&gt;「简书」&lt;/a&gt;作为一款「写作软件」在诞生之初就支持了 Markdown，Markdown 是一种「电子邮件」风格的「标记语言」，我们强烈推荐所有写作者学习和掌握该语言。为什么？可以参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/qqGjLN&quot;&gt;『为什么作家应该用 Markdown 保存自己的文稿』&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/PpDNMG&quot;&gt;『Markdown写作浅谈』&lt;/a&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><a href="https://www.jianshu.com/">「简书」</a>作为一款「写作软件」在诞生之初就支持了 Markdown，Markdown 是一种「电子邮件」风格的「标记语言」，我们强烈推荐所有写作者学习和掌握该语言。为什么？可以参考:</p><ul><li><a href="https://www.jianshu.com/p/qqGjLN">『为什么作家应该用 Markdown 保存自己的文稿』</a></li><li><a href="https://www.jianshu.com/p/PpDNMG">『Markdown写作浅谈』</a><a id="more"></a>在此，我们总结 Markdown 的优点如下：</li><li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li><li>让你专注于文字而不是排版。</li><li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</li><li>Markdown 的标记语法有极好的可读性。</li></ul><p>当然，我们既然如此推崇 Markdown ，也必定会教会你使用 Markdown ，这也是本文的目的所在。不过，虽然 Markdown 的语法已经足够简单，但是现有的 Markdown 语法说明更多的是写给 web 从业者看的，对于很多写作者来说，学习起来效率很低，现在，我们特地为写作者量身定做本指南，从写作者的实际需求出发，介绍写作者真正实用的常用格式，深入浅出、图文并茂地让您迅速掌握 Markdown 语法。</p><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>这是最为常用的格式，在平时常用的的文本编辑器中大多是这样实现的：输入文本、选中文本、设置标题格式。</p><p>而在 Markdown 中，你只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题 </span></span><br></pre></td></tr></table></figure><p><em>注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。</em></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 - 就可以了，例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 文本1</span><br><span class="line"><span class="bullet">-</span> 文本2</span><br><span class="line"><span class="bullet">-</span> 文本3</span><br></pre></td></tr></table></figure><p>如果你希望有序列表，<br>也可以在文字前面加上 1. 2. 3. 就可以了，例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 文本1</span><br><span class="line"><span class="bullet">2.</span> 文本2</span><br><span class="line"><span class="bullet">3.</span> 文本3</span><br></pre></td></tr></table></figure><p><em>注：-、1.和文本之间要保留一个字符的空格。</em></p><p>在 Markdown 中，插入链接不需要其他按钮，你只需要使用 <a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">显示文本</a> 这样的语法即可，例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://upload-images.jianshu.io/upload<span class="emphasis">_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br></pre></td></tr></table></figure><p><em>注：插入图片的语法和链接的语法很像，只是前面多了一个 ！。</em></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 &gt; 就好了，例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</span></span><br></pre></td></tr></table></figure><p>最终显示的就是：</p><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><p>Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*一盏灯*</span>， 一片昏黄；<span class="strong">**一简书**</span>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</span><br></pre></td></tr></table></figure><p>最终显示的就是下文，其中「一盏灯」是斜体，「一简书」是粗体：<br><em>一盏灯</em>， 一片昏黄；<strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p><h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><p>需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。<br>如果引用的语句为多行，可以将```置于这段代码的首行和末行。<br><img src="https://github.com/linin00/Cloud/blob/master/259-dcf737a97e71cd73.webp?raw=true" alt="代码引用的案例截图："></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>相关代码：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |---------------| ------|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><p>显示效果：<br>| Tables        | Are           | Cool  |<br>| ————- |:————-:| —–:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p><p>相关代码：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dog | bird | cat</span><br><span class="line">----|------|----</span><br><span class="line">foo | foo  | foo</span><br><span class="line">bar | bar  | bar</span><br><span class="line">baz | baz  | baz</span><br></pre></td></tr></table></figure><p>显示效果：<br>dog | bird | cat<br>—-|——|—-<br>foo | foo  | foo<br>bar | bar  | bar<br>baz | baz  | baz</p><p><em>通过加“:”以实现对齐效果</em></p><h2 id="显示链接中带括号的图片"><a href="#显示链接中带括号的图片" class="headerlink" title="显示链接中带括号的图片"></a>显示链接中带括号的图片</h2><p>代码如下:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![][1]</span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://latex.codecogs.com/gif.latex?\prod%20\(n_&#123;i&#125;\)+1</span></span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上几种格式是比较常用的格式，所以我们针对这些语法做了比较详细的说明。除这些之外，Markdown 还有其他语法，如想了解和学习更多，可以参考这篇<a href="https://link.jianshu.com/?t=http://wowubuntu.com/markdown/">『Markdown 语法说明』</a>。</p>]]></content:encoded>
      
      
      <category domain="http://yoursite.com/categories/Markdown/">Markdown</category>
      
      
      <category domain="http://yoursite.com/tags/%E6%8C%87%E5%8D%97/">指南</category>
      
      <category domain="http://yoursite.com/tags/%E7%BC%96%E8%BE%91/">编辑</category>
      
      <category domain="http://yoursite.com/tags/markdown/">markdown</category>
      
      
      <comments>http://yoursite.com/2020/09/05/Markdown%E6%8C%87%E5%8D%97%EF%BC%88%E6%96%B0%E6%89%8B%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo&#39;s next主题设置首页显示预览</title>
      <link>http://yoursite.com/2020/09/05/Hexo-s-next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E9%A2%84%E8%A7%88/</link>
      <guid>http://yoursite.com/2020/09/05/Hexo-s-next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E9%A2%84%E8%A7%88/</guid>
      <pubDate>Sat, 05 Sep 2020 10:29:41 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;一个很牛叉的解决&lt;a href=&quot;https://www.jianshu.com/p/393d067dba8d&quot;&gt;CGPointZero
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然而这解决方法在我的hexo版本不适用&lt;/p&gt;
&lt;p&gt;我的解决：在文章里加&lt;code&gt;&amp;lt;!-- more </description>
        
      
      
      
      <content:encoded><![CDATA[<p>一个很牛叉的解决<a href="https://www.jianshu.com/p/393d067dba8d">CGPointZero</a></p><p>然而这解决方法在我的hexo版本不适用</p><p>我的解决：在文章里加<code>&lt;!-- more --&gt;</code>会自动截断</p>]]></content:encoded>
      
      
      <category domain="http://yoursite.com/categories/hexo/">hexo</category>
      
      
      <category domain="http://yoursite.com/tags/%E7%BE%8E%E5%8C%96/">美化</category>
      
      <category domain="http://yoursite.com/tags/%E8%AE%BE%E7%BD%AE/">设置</category>
      
      
      <comments>http://yoursite.com/2020/09/05/Hexo-s-next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E9%A2%84%E8%A7%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>给blog增加上下文搜索功能</title>
      <link>http://yoursite.com/2020/09/02/%E7%BB%99blog%E5%A2%9E%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link>
      <guid>http://yoursite.com/2020/09/02/%E7%BB%99blog%E5%A2%9E%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid>
      <pubDate>Wed, 02 Sep 2020 00:40:43 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;为-Hexo-博客创建本地搜索引擎&quot;&gt;&lt;a href=&quot;#为-Hexo-博客创建本地搜索引擎&quot; class=&quot;headerlink&quot; title=&quot;为 Hexo 博客创建本地搜索引擎&quot;&gt;&lt;/a&gt;为 Hexo 博客创建本地搜索引擎&lt;/h1&gt;&lt;p&gt;NexT 主题默认提供了两个站内搜索解决方案：swiftype 和 tinysou。&lt;/p&gt;
&lt;h2 id=&quot;搜索功能的局限&quot;&gt;&lt;a href=&quot;#搜索功能的局限&quot; class=&quot;headerlink&quot; title=&quot;搜索功能的局限&quot;&gt;&lt;/a&gt;搜索功能的局限&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;受限于第三方服务，第三方服务可能说变就变——曾经的各种博客网站，以及 swiftype 就是如此；&lt;/li&gt;
&lt;li&gt;不喜欢第三方服务的样式，与博客样式脱节；&lt;/li&gt;
&lt;li&gt;使用第三方服务，需要应用第三方的 JavaScript 脚本等内容，可能存在安全风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过检索之后，发现 Hexo 已有可以接受的解决方案了。本文来介绍如何在 Hexo 博客中建立自己的本地搜索引擎。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="为-Hexo-博客创建本地搜索引擎"><a href="#为-Hexo-博客创建本地搜索引擎" class="headerlink" title="为 Hexo 博客创建本地搜索引擎"></a>为 Hexo 博客创建本地搜索引擎</h1><p>NexT 主题默认提供了两个站内搜索解决方案：swiftype 和 tinysou。</p><h2 id="搜索功能的局限"><a href="#搜索功能的局限" class="headerlink" title="搜索功能的局限"></a>搜索功能的局限</h2><ul><li>受限于第三方服务，第三方服务可能说变就变——曾经的各种博客网站，以及 swiftype 就是如此；</li><li>不喜欢第三方服务的样式，与博客样式脱节；</li><li>使用第三方服务，需要应用第三方的 JavaScript 脚本等内容，可能存在安全风险。</li></ul><p>经过检索之后，发现 Hexo 已有可以接受的解决方案了。本文来介绍如何在 Hexo 博客中建立自己的本地搜索引擎。</p><a id="more"></a><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>对于大型搜索引擎来说，在抓取并处理好网页之后，就要建立所谓的「倒排索引」了。所谓倒排索引，指的是以检索词的 term 为键，以包含该 term 的文档列表为值。如此一来，我们就可以根据检索词中的各个 term，获取若干列表。而后，对这些列表求交集，就能得到「包含检索词中所有 term」的文档了。</p><p>在个人网站上，特别是 Hexo 生成的静态站点，做类似的工作是不太容易的。这里原因有几点，分列如下</p><ul><li>Hexo 生成的是静态站点，因此无法利用服务器做数据库的存储和相关计算；</li><li>这就制约了倒排索引的存储和求交；</li><li>另外一方面，制作倒排索引的过程，需要应用完善的 NLP 分词，这一工程量相对巨大。</li></ul><p>考虑到我们无法在服务器上做数据库存储，我们就必须以文件的形式保存索引，让用户以浏览器下载该文件。此外，考虑到我们无法在服务器上做计算，我们就必须依赖可在浏览器上执行的代码，处理用户的检索任务。因此，我们说，仿照大型搜索引擎制作站内搜索，对于静态站点来说，是不现实的。</p><p>那么，我们可以怎样做呢？既然标准的方案无法达成，那我们就只能退而求其次。</p><p>首先，不管怎样「求其次」，都必须要有一个索引文件。这是因为，在索引文件当中进行各种操作，总是要比直接对网页页面进行操作来得要方便和快捷的。因此，首先我们需要一个能够嵌入 Hexo 的工具，方便地生成这样的索引文件。其次，有了索引，我们需要一个有效的算法：根据用户输入的检索词，返回包含检索词的文章列表。考虑到这样的算法需要在用户的浏览器上执行，我们选择使用 JavaScript 和 jQuery 来实现。接下来，为了与用户交互：接受检索词和返回结果；我们需要在页面的合适位置展示搜索框和输出结果。最后，还有一些细节问题需要处理。例如说，搜索框和输出结果的样式要如何设计；例如说，索引文件通常比较大，随页面一起下载会导致页面加载缓慢，要如何解决这个问题。</p><p>我们依次来解决这些问题。</p><h2 id="用-hexo-generator-search-生成索引"><a href="#用-hexo-generator-search-生成索引" class="headerlink" title="用 hexo-generator-search 生成索引"></a>用 hexo-generator-search 生成索引</h2><p>HaHack 参考 Christian Fei 的 <a href="https://github.com/christian-fei/Simple-Jekyll-Search">Simple Jekyll Search</a> 实现了名为 hexo-generator-search 的生成器。安装该生成器之后，在执行 hexo generate 的过程中，会按照配置生成一个 XML 文件，用于保存全站的文档数据。这个 XML 文件只是简单地做了数据的结构化存储，而完全没有考虑分词、倒排等问题。</p><p>安装 hexo-generator-search 非常简单，只需要在 Hexo 项目目录下执行下列命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-search</span><br></pre></td></tr></table></figure><p>如此一来，我们只需在站点配置文件 _config.yml 当中写入如下配置，即可为全站的文档生成索引文件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure><p>具体来说，hexo-generator-search 会为全站所有 post 类型的页面生成结构化的数据，并保存在本站的 /search.xml 当中。若想让 page 类型的页面也纳入索引，则可以将 field 的值修改为 all。</p><h2 id="用-JavaScript-和-jQuery-实现检索算法"><a href="#用-JavaScript-和-jQuery-实现检索算法" class="headerlink" title="用 JavaScript 和 jQuery 实现检索算法"></a>用 JavaScript 和 jQuery 实现检索算法</h2><p>另外一方面，HaHack 建议以 jQuery 的文本匹配为基础，在前端界面上运行站内搜索。主要的处理流程是：</p><ol><li>载入 search.xml；</li><li>解析 search.xml；</li><li>解析检索词；</li><li>在索引中进行字符串匹配；</li><li>展现结果。</li></ol><p>对官方的版本进行了少许的修改（后详），并加入了注释。这样应该相对比较好理解了。可以在 <a href="https://github.com/Liam0205/hexo-search-plugin-snippets/blob/master/snippets/search.js">GitHub</a> 上看到修改的版本。</p><p>需要注意的是，search.js 依赖 jQuery。因此，你需要在引入 search.js 之前，引入 jQuery 的脚本。比如，你可以在 head 部分这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;//cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;。</span><br></pre></td></tr></table></figure><h2 id="在合适的位置展示搜索框"><a href="#在合适的位置展示搜索框" class="headerlink" title="在合适的位置展示搜索框"></a>在合适的位置展示搜索框</h2><p>接下来，我们需要在合适的位置，呈现一个搜索框。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form class=<span class="string">&quot;site-search-form&quot;</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;local-search-input&quot;</span> class=<span class="string">&quot;st-search-input&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;local-search-result&quot;</span> class=<span class="string">&quot;local-search-result-cls&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>此处，local-search-input 是一个输入框，用于接收用户输入的检索词；local-search-result 是用于展现搜索结果的 div 标签。这部分代码，我也已上传到 <a href="https://github.com/Liam0205/hexo-search-plugin-snippets/blob/master/snippets/search.swig">GitHub</a>。</p><h2 id="其他一些细节"><a href="#其他一些细节" class="headerlink" title="其他一些细节"></a>其他一些细节</h2><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>现在，我们已经有了索引文件、搜索算法和搜索框。但是，现在而言，搜索框是孤立的：用户在搜索框中输入内容，并不会触发搜索算法。换而言之，搜索函数并没有调用。因此，我们需要调用定义在 search.js 当中定义的 searchFunc。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var path = <span class="string">&quot;/search.xml&quot;</span>;</span><br><span class="line">searchFunc(path, <span class="string">&#x27;local-search-input&#x27;</span>, <span class="string">&#x27;local-search-result&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="在何时的时候触发搜索函数"><a href="#在何时的时候触发搜索函数" class="headerlink" title="在何时的时候触发搜索函数"></a>在何时的时候触发搜索函数</h3><p>像上面这样调用搜索函数，有一个潜在的问题。调用搜索函数时，首先会尝试载入并解析 search.xml 文件。这个文件包含了站点里所有博文的所有内容；因此，通常来说它的体积非常大。这样一来，如果不做任何限制，函数将在网页加载时被调用；因而，体积庞大的索引文件也将在网页加载的时候引入。这会导致网页整体加载的速度非常缓慢，对用户体验是一种伤害。</p><p>因此，我们会考虑，在激活搜索框时，我们才去调用搜索函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var inputArea       = document.querySelector(<span class="string">&quot;#local-search-input&quot;</span>);</span><br><span class="line">inputArea.onclick   = <span class="function"><span class="title">function</span></span>()&#123; getSearchFile() &#125;</span><br></pre></td></tr></table></figure><p>此处，我们通过 inputArea 这个变量，监控搜索框的状态。只有当用户用鼠标点击搜索框时，才会触发 getSearchFile 函数，载入索引文件并执行 searchFunc。</p><p>getSearchFile 函数定义在 search.js 脚本当中了。</p><p>不过，这还不够。因为，如此一来，每次用户点击搜索框时，都会触发一次 searchFunc 函数，并加载一次 search.xml 索引文件。我们期待的是，只有当用户第一次点击搜索框之后，才去下载索引文件；之后的搜索行为，直接复用上一次加载的文件即可。</p><p>为此，我们需要在执行好 getSearchFile 函数之后，禁用 onclick 时间的 handler。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var inputArea       = document.querySelector(<span class="string">&quot;#local-search-input&quot;</span>);</span><br><span class="line">inputArea.onclick   = <span class="function"><span class="title">function</span></span>()&#123; getSearchFile(); this.onclick = null &#125;</span><br></pre></td></tr></table></figure><h3 id="在搜索框中屏蔽回车"><a href="#在搜索框中屏蔽回车" class="headerlink" title="在搜索框中屏蔽回车"></a>在搜索框中屏蔽回车</h3><p>由于我们在搜索框中使用了 input 标签。这是一个表单，但我们不希望它具有一些表单的行为。例如说，我们的搜索结果是实时呈现的；我们不希望用户在输入检索词之后，误按回车键，导致页面刷新。</p><p>为此，我们可以这样做。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputArea.onkeydown = <span class="function"><span class="title">function</span></span>()&#123; <span class="keyword">if</span>(event.keyCode == 13) <span class="built_in">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">在加载索引文件时，给用户一个提示</span><br></pre></td></tr></table></figure><h3 id="在加载索引文件时，给用户一个提示"><a href="#在加载索引文件时，给用户一个提示" class="headerlink" title="在加载索引文件时，给用户一个提示"></a>在加载索引文件时，给用户一个提示</h3><p>我们为了保护页面加载的速度，将加载索引文件的过程，后移到用户点击搜索框时进行。然而，如前所述，索引文件通常是比较大的；加载并解析索引文件通常会耗费不少时间。在这个过程中，用户可能已经输入了一些检索词；这些检索词，会因为尚未加载完毕索引文件，而得不到任何的检索结果。这当然是不合适的。</p><p>因此，我们需要在加载和解析索引文件的过程中，给用户一个清晰的提示。为此，我们需要修改 search.js 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="variable">$resultContent</span> = document.getElementById(<span class="string">&#x27;local-search-result&#x27;</span>);</span><br><span class="line"><span class="variable">$resultContent</span>.innerHTML = BTN + <span class="string">&quot;&lt;ul&gt;&lt;span class=&#x27;local-search-empty&#x27;&gt;首次搜索，正在载入索引文件，请稍后……&lt;span&gt;&lt;/ul&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>将这段代码放在加载和解析索引文件之前，就能在 local-search-result 中提示「正在载入索引文件」了。</p><h3 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h3><p>最后，我们可以通过样式表来控制这一系列内容的呈现形式。<em>始终博客</em>使用的样式表可以在 <a href="https://github.com/Liam0205/hexo-search-plugin-snippets/blob/master/snippets/search.stylus">GitHub</a> 上找到。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><ul><li><a href="http://hahack.com/codes/-">http://hahack.com/codes/-</a> local-search-engine-for-hexo/</li><li><a href="http://moxfive.xyz/2016/05/31/-">http://moxfive.xyz/2016/05/31/-</a> hexo-local-search/</li><li><a href="http://www.barretlee.com/blog/2017/06/04/-">http://www.barretlee.com/blog/2017/06/04/-</a> hexo-search-insite/</li><li><a href="https://github.com/barretlee/-">https://github.com/barretlee/-</a> hexo-search-plugin-snippets</li><li><a href="https://github.com/Liam0205/-">https://github.com/Liam0205/-</a> hexo-search-plugin-snippets</li></ul><p>(#ﾟДﾟ)似乎某样东西的难度超出了linin的想象呢</p>]]></content:encoded>
      
      
      <category domain="http://yoursite.com/categories/hexo/">hexo</category>
      
      
      <category domain="http://yoursite.com/tags/%E7%BE%8E%E5%8C%96/">美化</category>
      
      <category domain="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/">技术</category>
      
      <category domain="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/">设计</category>
      
      
      <comments>http://yoursite.com/2020/09/02/%E7%BB%99blog%E5%A2%9E%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>youtube-dl使用</title>
      <link>http://yoursite.com/2020/09/02/youtube-dl%E4%BD%BF%E7%94%A8/</link>
      <guid>http://yoursite.com/2020/09/02/youtube-dl%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Wed, 02 Sep 2020 00:40:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;youtube-dl：一个命令行视频下载利器&quot;&gt;&lt;a href=&quot;#youtube-dl：一个命令行视频下载利器&quot; class=&quot;headerlink&quot; title=&quot;youtube-dl：一个命令行视频下载利器&quot;&gt;&lt;/a&gt;youtube-dl：一个命令行视频下载利器&lt;/h1&gt;&lt;p&gt;youtube-dl 的官网：&lt;a href=&quot;http://rg3.github.io/youtube-dl/index.html&quot;&gt;youtube-dl&lt;/a&gt;&lt;br&gt;youtube-dl 的 GitHub 页面：&lt;a href=&quot;https://github.com/rg3/youtube-dl&quot;&gt;rg3/youtube-dl&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Youtube-dl-有什么用？&quot;&gt;&lt;a href=&quot;#Youtube-dl-有什么用？&quot; class=&quot;headerlink&quot; title=&quot;Youtube-dl 有什么用？&quot;&gt;&lt;/a&gt;Youtube-dl 有什么用？&lt;/h2&gt;&lt;p&gt;youtube-dl 是一个命令行工具，对我所知的大部分视频网站有不错的支持，你可以选择下载视频，或是将视频流直接导出到自己想使用的播放器中，也可以以JSON的形式获取可下载资源的URL。&lt;/p&gt;
&lt;p&gt;使用方便、足够简洁。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="youtube-dl：一个命令行视频下载利器"><a href="#youtube-dl：一个命令行视频下载利器" class="headerlink" title="youtube-dl：一个命令行视频下载利器"></a>youtube-dl：一个命令行视频下载利器</h1><p>youtube-dl 的官网：<a href="http://rg3.github.io/youtube-dl/index.html">youtube-dl</a><br>youtube-dl 的 GitHub 页面：<a href="https://github.com/rg3/youtube-dl">rg3/youtube-dl</a></p><h2 id="Youtube-dl-有什么用？"><a href="#Youtube-dl-有什么用？" class="headerlink" title="Youtube-dl 有什么用？"></a>Youtube-dl 有什么用？</h2><p>youtube-dl 是一个命令行工具，对我所知的大部分视频网站有不错的支持，你可以选择下载视频，或是将视频流直接导出到自己想使用的播放器中，也可以以JSON的形式获取可下载资源的URL。</p><p>使用方便、足够简洁。</p><a id="more"></a><h2 id="安装-Youtube-dl"><a href="#安装-Youtube-dl" class="headerlink" title="安装 Youtube-dl"></a>安装 Youtube-dl</h2><p>Youtube-dl 通过 PyPi 分发，如果你的系统安装有 pip3 或 pip ，请直接使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install --upgrade youtube_dl <span class="comment"># 或pip3</span></span><br></pre></td></tr></table></figure><p>如果你是 macOS 用户，也可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install youtube-dl</span><br></pre></td></tr></table></figure><p>官网上的这个页面还提供了 Windows 可用的 exe 和直接通过 curl 或 wget 安装的方法。</p><p>官网上的<a href="http://rg3.github.io/youtube-dl/download.html">这个页面</a>还提供了 Windows 可用的 exe 和直接通过 curl 或 wget 安装的方法。</p><h2 id="利用-Youtube-dl-下载"><a href="#利用-Youtube-dl-下载" class="headerlink" title="利用 Youtube-dl 下载"></a>利用 Youtube-dl 下载</h2><h3 id="普通下载"><a href="#普通下载" class="headerlink" title="普通下载"></a>普通下载</h3><p>通过 Youtube-dl 下载视频十分简洁，例如你需要下载<a href="http://www.bilibili.com/video/av11728123/%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%EF%BC%9A">http://www.bilibili.com/video/av11728123/可以这样：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl <span class="string">&#x27;http://www.bilibili.com/video/av11728123/&#x27;</span></span><br></pre></td></tr></table></figure><p>你会得到这样的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[BiliBili] 11728123: Downloading webpage</span><br><span class="line">[BiliBili] 11728123: Downloading video info page</span><br><span class="line">[download] Destination: 【全明星freestyle】音浪-11728123.mp4</span><br><span class="line">[download] 100% of 9.07MiB <span class="keyword">in</span> 00:01</span><br></pre></td></tr></table></figure><p>如果你不进行任何特殊的指定，它会分析网页、自动选择默认画质并下载至Destination显示的文件中。</p><h3 id="输出文件的名字"><a href="#输出文件的名字" class="headerlink" title="输出文件的名字"></a>输出文件的名字</h3><p>如果你想指定输出文件的名字（有时对批量下载的人来说十分重要），你可以使用-o：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl <span class="string">&#x27;http://www.bilibili.com/video/av11728123/&#x27;</span> -o <span class="string">&#x27;你要的名字&#x27;</span></span><br><span class="line"><span class="comment"># 下载至文件：你要的名字 (无后缀)</span></span><br></pre></td></tr></table></figure><p>当然，请注意你选择的名字的拓展名，youtube-dl 并不会自动修改你所指定的后缀名。youtube-dl 同时也支持 <a href="https://github.com/rg3/youtube-dl#output-template">OUTPUT TEMPLATE</a>，你可以利用 %(title)s等参数（参考 Python 的字符串形式）将文件命名，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl <span class="string">&#x27;http://www.bilibili.com/video/av11728123/&#x27;</span> -o <span class="string">&#x27;%(title)s.%(ext)s&#x27;</span></span><br><span class="line"><span class="comment"># 下载至文件：【全明星freestyle】音浪.mp4</span></span><br></pre></td></tr></table></figure><h3 id="使用代理下载"><a href="#使用代理下载" class="headerlink" title="使用代理下载"></a>使用代理下载</h3><p>youtube-dl 提供了使用代理的参数，你可以简单地将自己代理的地址填入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --proxy 127.0.0.1:1087 <span class="string">&#x27;https://www.youtube.com/watch\?v\=_fc_TLg3eQ4&#x27;</span></span><br><span class="line"><span class="comment"># 成功通过ss在国内下载某不存在网站的视频</span></span><br></pre></td></tr></table></figure><p>如果你不清楚如何使用自己的代理网址，请询问你的代理提供商。</p><h3 id="将流文件直接转发到播放器"><a href="#将流文件直接转发到播放器" class="headerlink" title="将流文件直接转发到播放器"></a>将流文件直接转发到播放器</h3><p>你可以使用标准输入输出进行这一操作，下面是使用 vlc 播放的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -o - <span class="string">&quot;https://www.youtube.com/watch\?v\=_fc_TLg3eQ4&quot;</span> | vlc -</span><br></pre></td></tr></table></figure><h3 id="其他下载选项"><a href="#其他下载选项" class="headerlink" title="其他下载选项"></a>其他下载选项</h3><p>youtube-dl 还提供很多其他的下载选项，如挑选合适的分辨率，下载一个播放列表等，你可以研究并自定义如何下载一个文件。</p><h2 id="国内的-youtube-dl：-You-Get"><a href="#国内的-youtube-dl：-You-Get" class="headerlink" title="国内的 youtube-dl： You-Get"></a>国内的 youtube-dl： <a href="https://linin.xyz/2020/09/01/you-get-%E4%BD%BF%E7%94%A8/">You-Get</a></h2><p>You-Get的GitHub地址：<a href="https://github.com/soimort/you-get">soimort/you-get</a><br>事实上而言，我发现You-Get对国内视频网站的支持更加全面，但是由于作者已经有大约两个月的时间没有维护了，我在这里不作推荐。但是如果你遇到无法使用youtube-dl下载的视频页面，不妨试试这个同类小工具。</p>]]></content:encoded>
      
      
      <category domain="http://yoursite.com/categories/youtube-dl/">youtube-dl</category>
      
      
      <category domain="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/">工具</category>
      
      <category domain="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/">技术</category>
      
      <category domain="http://yoursite.com/tags/youtube-dl/">youtube-dl</category>
      
      
      <comments>http://yoursite.com/2020/09/02/youtube-dl%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>linin01</title>
      <link>http://yoursite.com/2020/09/01/linin01/</link>
      <guid>http://yoursite.com/2020/09/01/linin01/</guid>
      <pubDate>Tue, 01 Sep 2020 15:45:10 GMT</pubDate>
      
      <description>Here&#39;s something encrypted, password is required to continue reading.</description>
      
      
      
      <content:encoded><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">密码呢?小老弟??😎</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a344d820c1fc78a055c825865a55fb8b4ea0fb107cfdddc3faacca45dd9f3e41">f7f2889cd1334e7def64bd9049eb373c3cf0537c7d9f77b91d376dd961d02746480b107c24b362a1706b45a0dfe12ed2ebbaa914fdb1afc54b89052f5b1769926ba37ba16b168cb86add8b14e9c1aae1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      <category domain="http://yoursite.com/categories/%E6%97%A5%E5%B8%B8/">日常</category>
      
      
      <category domain="http://yoursite.com/tags/%E5%8A%A0%E5%AF%86/">加密</category>
      
      
      <comments>http://yoursite.com/2020/09/01/linin01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>linin00</title>
      <link>http://yoursite.com/2020/09/01/linin00/</link>
      <guid>http://yoursite.com/2020/09/01/linin00/</guid>
      <pubDate>Tue, 01 Sep 2020 15:41:15 GMT</pubDate>
      
      <description>Here&#39;s something encrypted, password is required to continue reading.</description>
      
      
      
      <content:encoded><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">密码呢?小老弟??😎</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c3431274f6df54cce40880f1acb169bedfa00debf69794bd4c1923dc9f8b174c">8e02f4f3c79ac7f91c4b3fbdd8a1d30a</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      <category domain="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/">测试</category>
      
      
      <category domain="http://yoursite.com/tags/%E5%8A%A0%E5%AF%86/">加密</category>
      
      
      <comments>http://yoursite.com/2020/09/01/linin00/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo文章加密</title>
      <link>http://yoursite.com/2020/09/01/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</link>
      <guid>http://yoursite.com/2020/09/01/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</guid>
      <pubDate>Tue, 01 Sep 2020 15:01:30 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hexo的next主题可谓是包办了你几乎所有的需求，却偏偏没有加上&lt;strong&gt;文章加密功能&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;实现方法&quot;&gt;&lt;a href=&quot;#实现方法&quot; class=&quot;headerlink&quot; title=&quot;实现方法&quot;&gt;&lt;/a&gt;实现方法&lt;/h3&gt;&lt;h4 id=&quot;低级&quot;&gt;&lt;a href=&quot;#低级&quot; class=&quot;headerlink&quot; title=&quot;低级&quot;&gt;&lt;/a&gt;低级&lt;/h4&gt;&lt;h5 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h5&gt;&lt;p&gt;打开yourblogsite/themes/next/layout/custom/head.swig文件，在&lt;head&gt;&lt;/head&gt;之间添加以下内容&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hexo的next主题可谓是包办了你几乎所有的需求，却偏偏没有加上<strong>文章加密功能</strong>。</p><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><h4 id="低级"><a href="#低级" class="headerlink" title="低级"></a>低级</h4><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>打开yourblogsite/themes/next/layout/custom/head.swig文件，在<head></head>之间添加以下内容</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#JavaScript</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">&#x27;请输入密码&#x27;</span>) !== <span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">                alert(<span class="string">&#x27;密码错误&#x27;</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>之后，在你想要加密的文章的头文件里添加上password: yourpassword即可。</p><p>注意，这里仅针对Hexo平台的next主题。但是，它的代码和思想是通用的，你在Hexo的其他主题，甚至是Jekyll的主题里也是可以做到的，只是要摆放的位置会不一样。位置的要点是：</p><ul><li><p>模板文件。无论是Hexo还是Jekyll，都应该在layout文件夹中。</p></li><li><head></head>之间。其实在其他位置也是可行的，但是在此代码之前的一些内容可能会被加载，不完美。##### 存在问题目前主要问题是：</li><li><p>丑。调用浏览器的UI，各个平台的样式不统一。</p></li><li><p>可能被破解。如果你的博客源码是存放在GitHub这样的开源库的话，那么恭喜你。别有用心之人可以通过查看你的GitHub仓库对应文章的md文件找到这个密码。</p></li></ul><p>目前，我是把源码存在Coding的，他有私人仓库，所以不存在这样的问题。如果你是土豪程序猿，或者VPS，虚拟主机玩家，第二点也可以忽略。</p><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><p>真正高级别的方法早就有大神给做好了，同样是在hexo插件中心 &amp; GitHub。现将方法记录如下。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>或者 <code>bashyarn add hexo-blog-encrypt</code>(需要安装 Yarn)</p><h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><ol><li>首先在 站点配置文件 中启用该插件:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>然后在你的文章的头部添加上对应的字段，如 password, abstract, message<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-01-04T22:20:13.000Z</span><br><span class="line">category: 教程</span><br><span class="line">tags:</span><br><span class="line">  - 博客</span><br><span class="line">  - Hexo</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 密码：TloveY</span><br><span class="line">message:  输入密码，查看文章</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><ul><li>password: 是该博客加密使用的密码</li><li>abstract: 是该博客的摘要，会显示在博客的列表页</li><li>message: 这个是博客查看时，密码输入框上面的描述性文字</li></ul><ol start="3"><li>如果你想对 TOC 也进行加密，则在 article.ejs 中将 TOC 的生成代码修改成如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(post.toc == <span class="literal">true</span>)&#123; %&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;toc-div&quot;</span> class=<span class="string">&quot;toc-article&quot;</span> &lt;% <span class="keyword">if</span> (post.encrypt == <span class="literal">true</span>) &#123; %&gt;style=<span class="string">&quot;display:none&quot;</span> &lt;% &#125; %&gt;&gt;</span><br><span class="line">        &lt;strong class=<span class="string">&quot;toc-title&quot;</span>&gt;Index&lt;/strong&gt;</span><br><span class="line">        &lt;% <span class="keyword">if</span> (post.encrypt == <span class="literal">true</span>) &#123; %&gt;</span><br><span class="line">            &lt;%- toc(post.origin) %&gt;</span><br><span class="line">        &lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line">            &lt;%- toc(post.content) %&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;%- post.content %&gt;</span><br></pre></td></tr></table></figure></li><li>然后使用 <code>bashhexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，来查看效果。<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4></li><li>如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在 站点配置文件 中。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  default_abstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。</span><br><span class="line">  default_message: 输入密码，查看文章。</span><br></pre></td></tr></table></figure>这样，对于每一篇需要加密的文章就不必都在在头部添加 abstract 和 message 字段了，脚本会自动添加默认的内容填充。</li></ol><p>default_abstract : 这个是指在文章列表页，我们看到的加密文章描述。当然这是对所有加密文章生效的。<br>default_message : 这个在文章详情页的密码输入框上方的描述性文字。<br>default_template : 这个是指在文章详情页，我们看到的输入密码阅读的模板，同理，这个也是针对所有文章的</p><ol start="2"><li>如果你希望对某一篇特定的文章做特殊处理（如本文的 abstract ，可以在对应文章的头部添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-01-04T22:20:13.000Z</span><br><span class="line">category: 教程</span><br><span class="line">tags:</span><br><span class="line">  - 博客</span><br><span class="line">  - Hexo</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 密码：TloveY</span><br><span class="line">---</span><br></pre></td></tr></table></figure>此时，博客头部的 abstract 会覆盖 站点配置文件 的 default_abstract 实现自定义。<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4></li></ol><ul><li><p>如果你开启了 字数统计功能 的话，那么本文的字数会显得比实际值大。</p></li><li><p>加密文章内部分脚本会失效，已知<strong>代码复制</strong>失效。</p></li><li><p>加密输入密码无反应 bug。插件作者在之前版本已修复这个问题。 近期我也遇到了这个问题，查看GitHub上这个插件的issue发现，原因在于Chrome 将不再允许 https:// 页面加载 HTTP 资源，解决方案是开启博客的https访问，具体搜索怎么开启博客https访问即可。<a href="https://www.jianshu.com/p/509d2a240b7d">解决方案1</a><a href="https://github.com/MikeCoder/hexo-blog-encrypt/issues/114">解决方案2</a></p></li><li><p>最后的解决是在GitHub page 强制开启https</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://yoursite.com/categories/hexo/">hexo</category>
      
      
      <category domain="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/">技术</category>
      
      <category domain="http://yoursite.com/tags/%E5%8A%A0%E5%AF%86/">加密</category>
      
      
      <comments>http://yoursite.com/2020/09/01/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
